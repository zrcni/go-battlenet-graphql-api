// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/vektah/gqlparser"
	"github.com/vektah/gqlparser/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Achievement struct {
		Id          func(childComplexity int) int
		Title       func(childComplexity int) int
		Points      func(childComplexity int) int
		Description func(childComplexity int) int
		Icon        func(childComplexity int) int
		Criteria    func(childComplexity int) int
		AccountWide func(childComplexity int) int
		FactionId   func(childComplexity int) int
	}

	AchievementCriteria struct {
		Id          func(childComplexity int) int
		Description func(childComplexity int) int
		OrderIndex  func(childComplexity int) int
		Max         func(childComplexity int) int
	}

	AzeriteEmpoweredItem struct {
		AzeritePowers func(childComplexity int) int
	}

	AzeriteItem struct {
		AzeriteLevel               func(childComplexity int) int
		AzeriteExperience          func(childComplexity int) int
		AzeriteExperienceRemaining func(childComplexity int) int
	}

	AzeritePower struct {
		Id          func(childComplexity int) int
		Tier        func(childComplexity int) int
		SpellId     func(childComplexity int) int
		BonusListId func(childComplexity int) int
	}

	Character struct {
		LastModified           func(childComplexity int) int
		Name                   func(childComplexity int) int
		Realm                  func(childComplexity int) int
		Battlegroup            func(childComplexity int) int
		Class                  func(childComplexity int) int
		Race                   func(childComplexity int) int
		Gender                 func(childComplexity int) int
		Level                  func(childComplexity int) int
		AchievementPoints      func(childComplexity int) int
		Thumbnail              func(childComplexity int) int
		CalcClass              func(childComplexity int) int
		Faction                func(childComplexity int) int
		TotalHonorableKills    func(childComplexity int) int
		Feed                   func(childComplexity int) int
		Pets                   func(childComplexity int) int
		Mounts                 func(childComplexity int) int
		AverageItemLevel       func(childComplexity int) int
		AverageItemLevelInBags func(childComplexity int) int
		Items                  func(childComplexity int) int
		Professions            func(childComplexity int) int
		Reputation             func(childComplexity int) int
		Stats                  func(childComplexity int) int
	}

	CharacterFeedAchievement struct {
		Type           func(childComplexity int) int
		Timestamp      func(childComplexity int) int
		Achievement    func(childComplexity int) int
		FeatOfStrength func(childComplexity int) int
	}

	CharacterFeedBossKill struct {
		Type           func(childComplexity int) int
		Timestamp      func(childComplexity int) int
		Achievement    func(childComplexity int) int
		FeatOfStrength func(childComplexity int) int
		Criteria       func(childComplexity int) int
		Quantity       func(childComplexity int) int
		Name           func(childComplexity int) int
	}

	CharacterFeedCriteria struct {
		Type        func(childComplexity int) int
		Timestamp   func(childComplexity int) int
		Achievement func(childComplexity int) int
	}

	CharacterFeedLoot struct {
		Type       func(childComplexity int) int
		Timestamp  func(childComplexity int) int
		ItemId     func(childComplexity int) int
		Context    func(childComplexity int) int
		BonusLists func(childComplexity int) int
	}

	CharacterItems struct {
		Head     func(childComplexity int) int
		Neck     func(childComplexity int) int
		Shoulder func(childComplexity int) int
		Back     func(childComplexity int) int
		Chest    func(childComplexity int) int
		Shirt    func(childComplexity int) int
		Tabard   func(childComplexity int) int
		Wrist    func(childComplexity int) int
		Hands    func(childComplexity int) int
		Waist    func(childComplexity int) int
		Legs     func(childComplexity int) int
		Feet     func(childComplexity int) int
		Finger1  func(childComplexity int) int
		Finger2  func(childComplexity int) int
		Trinket1 func(childComplexity int) int
		Trinket2 func(childComplexity int) int
		MainHand func(childComplexity int) int
		OffHand  func(childComplexity int) int
	}

	CharacterMounts struct {
		NumCollected    func(childComplexity int) int
		NumNotCollected func(childComplexity int) int
		Collected       func(childComplexity int) int
	}

	CharacterPets struct {
		NumCollected    func(childComplexity int) int
		NumNotCollected func(childComplexity int) int
		Collected       func(childComplexity int) int
	}

	CharacterProfessions struct {
		Primary   func(childComplexity int) int
		Secondary func(childComplexity int) int
	}

	CharacterStats struct {
		Health                      func(childComplexity int) int
		PowerType                   func(childComplexity int) int
		Power                       func(childComplexity int) int
		Str                         func(childComplexity int) int
		Agi                         func(childComplexity int) int
		Int                         func(childComplexity int) int
		Sta                         func(childComplexity int) int
		SpeedRating                 func(childComplexity int) int
		SpeedRatingBonus            func(childComplexity int) int
		Crit                        func(childComplexity int) int
		CritRating                  func(childComplexity int) int
		Haste                       func(childComplexity int) int
		HasteRating                 func(childComplexity int) int
		HasteRatingPercent          func(childComplexity int) int
		Mastery                     func(childComplexity int) int
		MasteryRating               func(childComplexity int) int
		Leech                       func(childComplexity int) int
		LeechRating                 func(childComplexity int) int
		LeechRatingBonus            func(childComplexity int) int
		Versatility                 func(childComplexity int) int
		VersatilityDamageDoneBonus  func(childComplexity int) int
		VersatilityHealingDoneBonus func(childComplexity int) int
		VersatilityDamageTakenBonus func(childComplexity int) int
		AvoidanceRating             func(childComplexity int) int
		AvoidanceRatingBonus        func(childComplexity int) int
		SpellPen                    func(childComplexity int) int
		SpellCrit                   func(childComplexity int) int
		SpellCritRating             func(childComplexity int) int
		Mana5                       func(childComplexity int) int
		Mana5Combat                 func(childComplexity int) int
		Armor                       func(childComplexity int) int
		Dodge                       func(childComplexity int) int
		DodgeRating                 func(childComplexity int) int
		Parry                       func(childComplexity int) int
		ParryRating                 func(childComplexity int) int
		Block                       func(childComplexity int) int
		BlockRating                 func(childComplexity int) int
		MainHandDmgMin              func(childComplexity int) int
		MainHandDmgMax              func(childComplexity int) int
		MainHandSpeed               func(childComplexity int) int
		MainHandDps                 func(childComplexity int) int
		OffHandDmgMin               func(childComplexity int) int
		OffHandDmgMax               func(childComplexity int) int
		OffHandSpeed                func(childComplexity int) int
		OffHandDps                  func(childComplexity int) int
		RangedDmgMin                func(childComplexity int) int
		RangedDmgMax                func(childComplexity int) int
		RangedSpeed                 func(childComplexity int) int
		RangedDps                   func(childComplexity int) int
	}

	Icons struct {
		Small  func(childComplexity int) int
		Medium func(childComplexity int) int
		Large  func(childComplexity int) int
	}

	Item struct {
		Id                   func(childComplexity int) int
		Name                 func(childComplexity int) int
		Icon                 func(childComplexity int) int
		Quality              func(childComplexity int) int
		ItemLevel            func(childComplexity int) int
		TooltipParams        func(childComplexity int) int
		Stats                func(childComplexity int) int
		Armor                func(childComplexity int) int
		Context              func(childComplexity int) int
		BonusLists           func(childComplexity int) int
		ArtifactId           func(childComplexity int) int
		DisplayInfoId        func(childComplexity int) int
		ArtifactAppearanceId func(childComplexity int) int
		Appearance           func(childComplexity int) int
		AzeriteItem          func(childComplexity int) int
		AzeriteEmpoweredItem func(childComplexity int) int
	}

	ItemStat struct {
		Stat   func(childComplexity int) int
		Amount func(childComplexity int) int
	}

	ItemTooltipParams struct {
		TransmogItem      func(childComplexity int) int
		TimewalkerLevel   func(childComplexity int) int
		AzeritePower0     func(childComplexity int) int
		AzeritePower1     func(childComplexity int) int
		AzeritePower2     func(childComplexity int) int
		AzeritePower3     func(childComplexity int) int
		AzeritePower4     func(childComplexity int) int
		AzeritePowerLevel func(childComplexity int) int
	}

	Mount struct {
		Name       func(childComplexity int) int
		SpellId    func(childComplexity int) int
		CreatureId func(childComplexity int) int
		ItemId     func(childComplexity int) int
		WowheadUrl func(childComplexity int) int
		QualityId  func(childComplexity int) int
		Icons      func(childComplexity int) int
		IsGround   func(childComplexity int) int
		IsFlying   func(childComplexity int) int
		IsAquatic  func(childComplexity int) int
		IsJumping  func(childComplexity int) int
	}

	Pet struct {
		Name                        func(childComplexity int) int
		SpellId                     func(childComplexity int) int
		CreatureId                  func(childComplexity int) int
		ItemId                      func(childComplexity int) int
		QualityId                   func(childComplexity int) int
		Icon                        func(childComplexity int) int
		Stats                       func(childComplexity int) int
		BattlePetGuid               func(childComplexity int) int
		IsFavorite                  func(childComplexity int) int
		IsFirstAbilitySlotSelected  func(childComplexity int) int
		IsSecondAbilitySlotSelected func(childComplexity int) int
		IsThirdAbilitySlotSelected  func(childComplexity int) int
		CreatureName                func(childComplexity int) int
		CanBattle                   func(childComplexity int) int
	}

	PetStats struct {
		SpeciesId    func(childComplexity int) int
		BreedId      func(childComplexity int) int
		PetQualityId func(childComplexity int) int
		Level        func(childComplexity int) int
		Health       func(childComplexity int) int
		Power        func(childComplexity int) int
		Speed        func(childComplexity int) int
	}

	Profession struct {
		Id      func(childComplexity int) int
		Name    func(childComplexity int) int
		Icon    func(childComplexity int) int
		Rank    func(childComplexity int) int
		Max     func(childComplexity int) int
		Recipes func(childComplexity int) int
	}

	Query struct {
		Character func(childComplexity int, input CharacterQueryInput) int
		Mounts    func(childComplexity int, input SearchInput) int
	}

	Reputation struct {
		Id       func(childComplexity int) int
		Name     func(childComplexity int) int
		Standing func(childComplexity int) int
		Value    func(childComplexity int) int
		Max      func(childComplexity int) int
	}

	TransmogItem struct {
		ItemId                      func(childComplexity int) int
		ItemAppearanceModId         func(childComplexity int) int
		TransmogItemAppearanceModId func(childComplexity int) int
	}
}

type QueryResolver interface {
	Character(ctx context.Context, input CharacterQueryInput) (*Character, error)
	Mounts(ctx context.Context, input SearchInput) ([]*Mount, error)
}

func field_Query_character_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 CharacterQueryInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalCharacterQueryInput(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Query_mounts_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 SearchInput
	if tmp, ok := rawArgs["input"]; ok {
		var err error
		arg0, err = UnmarshalSearchInput(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil

}

func field_Query___type_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil

}

func field___Type_fields_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil

}

func field___Type_enumValues_args(rawArgs map[string]interface{}) (map[string]interface{}, error) {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil

}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	switch typeName + "." + field {

	case "Achievement.id":
		if e.complexity.Achievement.Id == nil {
			break
		}

		return e.complexity.Achievement.Id(childComplexity), true

	case "Achievement.title":
		if e.complexity.Achievement.Title == nil {
			break
		}

		return e.complexity.Achievement.Title(childComplexity), true

	case "Achievement.points":
		if e.complexity.Achievement.Points == nil {
			break
		}

		return e.complexity.Achievement.Points(childComplexity), true

	case "Achievement.description":
		if e.complexity.Achievement.Description == nil {
			break
		}

		return e.complexity.Achievement.Description(childComplexity), true

	case "Achievement.icon":
		if e.complexity.Achievement.Icon == nil {
			break
		}

		return e.complexity.Achievement.Icon(childComplexity), true

	case "Achievement.criteria":
		if e.complexity.Achievement.Criteria == nil {
			break
		}

		return e.complexity.Achievement.Criteria(childComplexity), true

	case "Achievement.accountWide":
		if e.complexity.Achievement.AccountWide == nil {
			break
		}

		return e.complexity.Achievement.AccountWide(childComplexity), true

	case "Achievement.factionId":
		if e.complexity.Achievement.FactionId == nil {
			break
		}

		return e.complexity.Achievement.FactionId(childComplexity), true

	case "AchievementCriteria.id":
		if e.complexity.AchievementCriteria.Id == nil {
			break
		}

		return e.complexity.AchievementCriteria.Id(childComplexity), true

	case "AchievementCriteria.description":
		if e.complexity.AchievementCriteria.Description == nil {
			break
		}

		return e.complexity.AchievementCriteria.Description(childComplexity), true

	case "AchievementCriteria.orderIndex":
		if e.complexity.AchievementCriteria.OrderIndex == nil {
			break
		}

		return e.complexity.AchievementCriteria.OrderIndex(childComplexity), true

	case "AchievementCriteria.max":
		if e.complexity.AchievementCriteria.Max == nil {
			break
		}

		return e.complexity.AchievementCriteria.Max(childComplexity), true

	case "AzeriteEmpoweredItem.azeritePowers":
		if e.complexity.AzeriteEmpoweredItem.AzeritePowers == nil {
			break
		}

		return e.complexity.AzeriteEmpoweredItem.AzeritePowers(childComplexity), true

	case "AzeriteItem.azeriteLevel":
		if e.complexity.AzeriteItem.AzeriteLevel == nil {
			break
		}

		return e.complexity.AzeriteItem.AzeriteLevel(childComplexity), true

	case "AzeriteItem.azeriteExperience":
		if e.complexity.AzeriteItem.AzeriteExperience == nil {
			break
		}

		return e.complexity.AzeriteItem.AzeriteExperience(childComplexity), true

	case "AzeriteItem.azeriteExperienceRemaining":
		if e.complexity.AzeriteItem.AzeriteExperienceRemaining == nil {
			break
		}

		return e.complexity.AzeriteItem.AzeriteExperienceRemaining(childComplexity), true

	case "AzeritePower.id":
		if e.complexity.AzeritePower.Id == nil {
			break
		}

		return e.complexity.AzeritePower.Id(childComplexity), true

	case "AzeritePower.tier":
		if e.complexity.AzeritePower.Tier == nil {
			break
		}

		return e.complexity.AzeritePower.Tier(childComplexity), true

	case "AzeritePower.spellId":
		if e.complexity.AzeritePower.SpellId == nil {
			break
		}

		return e.complexity.AzeritePower.SpellId(childComplexity), true

	case "AzeritePower.bonusListId":
		if e.complexity.AzeritePower.BonusListId == nil {
			break
		}

		return e.complexity.AzeritePower.BonusListId(childComplexity), true

	case "Character.lastModified":
		if e.complexity.Character.LastModified == nil {
			break
		}

		return e.complexity.Character.LastModified(childComplexity), true

	case "Character.name":
		if e.complexity.Character.Name == nil {
			break
		}

		return e.complexity.Character.Name(childComplexity), true

	case "Character.realm":
		if e.complexity.Character.Realm == nil {
			break
		}

		return e.complexity.Character.Realm(childComplexity), true

	case "Character.battlegroup":
		if e.complexity.Character.Battlegroup == nil {
			break
		}

		return e.complexity.Character.Battlegroup(childComplexity), true

	case "Character.class":
		if e.complexity.Character.Class == nil {
			break
		}

		return e.complexity.Character.Class(childComplexity), true

	case "Character.race":
		if e.complexity.Character.Race == nil {
			break
		}

		return e.complexity.Character.Race(childComplexity), true

	case "Character.gender":
		if e.complexity.Character.Gender == nil {
			break
		}

		return e.complexity.Character.Gender(childComplexity), true

	case "Character.level":
		if e.complexity.Character.Level == nil {
			break
		}

		return e.complexity.Character.Level(childComplexity), true

	case "Character.achievementPoints":
		if e.complexity.Character.AchievementPoints == nil {
			break
		}

		return e.complexity.Character.AchievementPoints(childComplexity), true

	case "Character.thumbnail":
		if e.complexity.Character.Thumbnail == nil {
			break
		}

		return e.complexity.Character.Thumbnail(childComplexity), true

	case "Character.calcClass":
		if e.complexity.Character.CalcClass == nil {
			break
		}

		return e.complexity.Character.CalcClass(childComplexity), true

	case "Character.faction":
		if e.complexity.Character.Faction == nil {
			break
		}

		return e.complexity.Character.Faction(childComplexity), true

	case "Character.totalHonorableKills":
		if e.complexity.Character.TotalHonorableKills == nil {
			break
		}

		return e.complexity.Character.TotalHonorableKills(childComplexity), true

	case "Character.feed":
		if e.complexity.Character.Feed == nil {
			break
		}

		return e.complexity.Character.Feed(childComplexity), true

	case "Character.pets":
		if e.complexity.Character.Pets == nil {
			break
		}

		return e.complexity.Character.Pets(childComplexity), true

	case "Character.mounts":
		if e.complexity.Character.Mounts == nil {
			break
		}

		return e.complexity.Character.Mounts(childComplexity), true

	case "Character.averageItemLevel":
		if e.complexity.Character.AverageItemLevel == nil {
			break
		}

		return e.complexity.Character.AverageItemLevel(childComplexity), true

	case "Character.averageItemLevelInBags":
		if e.complexity.Character.AverageItemLevelInBags == nil {
			break
		}

		return e.complexity.Character.AverageItemLevelInBags(childComplexity), true

	case "Character.items":
		if e.complexity.Character.Items == nil {
			break
		}

		return e.complexity.Character.Items(childComplexity), true

	case "Character.professions":
		if e.complexity.Character.Professions == nil {
			break
		}

		return e.complexity.Character.Professions(childComplexity), true

	case "Character.reputation":
		if e.complexity.Character.Reputation == nil {
			break
		}

		return e.complexity.Character.Reputation(childComplexity), true

	case "Character.stats":
		if e.complexity.Character.Stats == nil {
			break
		}

		return e.complexity.Character.Stats(childComplexity), true

	case "CharacterFeedAchievement.type":
		if e.complexity.CharacterFeedAchievement.Type == nil {
			break
		}

		return e.complexity.CharacterFeedAchievement.Type(childComplexity), true

	case "CharacterFeedAchievement.timestamp":
		if e.complexity.CharacterFeedAchievement.Timestamp == nil {
			break
		}

		return e.complexity.CharacterFeedAchievement.Timestamp(childComplexity), true

	case "CharacterFeedAchievement.achievement":
		if e.complexity.CharacterFeedAchievement.Achievement == nil {
			break
		}

		return e.complexity.CharacterFeedAchievement.Achievement(childComplexity), true

	case "CharacterFeedAchievement.featOfStrength":
		if e.complexity.CharacterFeedAchievement.FeatOfStrength == nil {
			break
		}

		return e.complexity.CharacterFeedAchievement.FeatOfStrength(childComplexity), true

	case "CharacterFeedBossKill.type":
		if e.complexity.CharacterFeedBossKill.Type == nil {
			break
		}

		return e.complexity.CharacterFeedBossKill.Type(childComplexity), true

	case "CharacterFeedBossKill.timestamp":
		if e.complexity.CharacterFeedBossKill.Timestamp == nil {
			break
		}

		return e.complexity.CharacterFeedBossKill.Timestamp(childComplexity), true

	case "CharacterFeedBossKill.achievement":
		if e.complexity.CharacterFeedBossKill.Achievement == nil {
			break
		}

		return e.complexity.CharacterFeedBossKill.Achievement(childComplexity), true

	case "CharacterFeedBossKill.featOfStrength":
		if e.complexity.CharacterFeedBossKill.FeatOfStrength == nil {
			break
		}

		return e.complexity.CharacterFeedBossKill.FeatOfStrength(childComplexity), true

	case "CharacterFeedBossKill.criteria":
		if e.complexity.CharacterFeedBossKill.Criteria == nil {
			break
		}

		return e.complexity.CharacterFeedBossKill.Criteria(childComplexity), true

	case "CharacterFeedBossKill.quantity":
		if e.complexity.CharacterFeedBossKill.Quantity == nil {
			break
		}

		return e.complexity.CharacterFeedBossKill.Quantity(childComplexity), true

	case "CharacterFeedBossKill.name":
		if e.complexity.CharacterFeedBossKill.Name == nil {
			break
		}

		return e.complexity.CharacterFeedBossKill.Name(childComplexity), true

	case "CharacterFeedCriteria.type":
		if e.complexity.CharacterFeedCriteria.Type == nil {
			break
		}

		return e.complexity.CharacterFeedCriteria.Type(childComplexity), true

	case "CharacterFeedCriteria.timestamp":
		if e.complexity.CharacterFeedCriteria.Timestamp == nil {
			break
		}

		return e.complexity.CharacterFeedCriteria.Timestamp(childComplexity), true

	case "CharacterFeedCriteria.achievement":
		if e.complexity.CharacterFeedCriteria.Achievement == nil {
			break
		}

		return e.complexity.CharacterFeedCriteria.Achievement(childComplexity), true

	case "CharacterFeedLoot.type":
		if e.complexity.CharacterFeedLoot.Type == nil {
			break
		}

		return e.complexity.CharacterFeedLoot.Type(childComplexity), true

	case "CharacterFeedLoot.timestamp":
		if e.complexity.CharacterFeedLoot.Timestamp == nil {
			break
		}

		return e.complexity.CharacterFeedLoot.Timestamp(childComplexity), true

	case "CharacterFeedLoot.itemId":
		if e.complexity.CharacterFeedLoot.ItemId == nil {
			break
		}

		return e.complexity.CharacterFeedLoot.ItemId(childComplexity), true

	case "CharacterFeedLoot.context":
		if e.complexity.CharacterFeedLoot.Context == nil {
			break
		}

		return e.complexity.CharacterFeedLoot.Context(childComplexity), true

	case "CharacterFeedLoot.bonusLists":
		if e.complexity.CharacterFeedLoot.BonusLists == nil {
			break
		}

		return e.complexity.CharacterFeedLoot.BonusLists(childComplexity), true

	case "CharacterItems.head":
		if e.complexity.CharacterItems.Head == nil {
			break
		}

		return e.complexity.CharacterItems.Head(childComplexity), true

	case "CharacterItems.neck":
		if e.complexity.CharacterItems.Neck == nil {
			break
		}

		return e.complexity.CharacterItems.Neck(childComplexity), true

	case "CharacterItems.shoulder":
		if e.complexity.CharacterItems.Shoulder == nil {
			break
		}

		return e.complexity.CharacterItems.Shoulder(childComplexity), true

	case "CharacterItems.back":
		if e.complexity.CharacterItems.Back == nil {
			break
		}

		return e.complexity.CharacterItems.Back(childComplexity), true

	case "CharacterItems.chest":
		if e.complexity.CharacterItems.Chest == nil {
			break
		}

		return e.complexity.CharacterItems.Chest(childComplexity), true

	case "CharacterItems.shirt":
		if e.complexity.CharacterItems.Shirt == nil {
			break
		}

		return e.complexity.CharacterItems.Shirt(childComplexity), true

	case "CharacterItems.tabard":
		if e.complexity.CharacterItems.Tabard == nil {
			break
		}

		return e.complexity.CharacterItems.Tabard(childComplexity), true

	case "CharacterItems.wrist":
		if e.complexity.CharacterItems.Wrist == nil {
			break
		}

		return e.complexity.CharacterItems.Wrist(childComplexity), true

	case "CharacterItems.hands":
		if e.complexity.CharacterItems.Hands == nil {
			break
		}

		return e.complexity.CharacterItems.Hands(childComplexity), true

	case "CharacterItems.waist":
		if e.complexity.CharacterItems.Waist == nil {
			break
		}

		return e.complexity.CharacterItems.Waist(childComplexity), true

	case "CharacterItems.legs":
		if e.complexity.CharacterItems.Legs == nil {
			break
		}

		return e.complexity.CharacterItems.Legs(childComplexity), true

	case "CharacterItems.feet":
		if e.complexity.CharacterItems.Feet == nil {
			break
		}

		return e.complexity.CharacterItems.Feet(childComplexity), true

	case "CharacterItems.finger1":
		if e.complexity.CharacterItems.Finger1 == nil {
			break
		}

		return e.complexity.CharacterItems.Finger1(childComplexity), true

	case "CharacterItems.finger2":
		if e.complexity.CharacterItems.Finger2 == nil {
			break
		}

		return e.complexity.CharacterItems.Finger2(childComplexity), true

	case "CharacterItems.trinket1":
		if e.complexity.CharacterItems.Trinket1 == nil {
			break
		}

		return e.complexity.CharacterItems.Trinket1(childComplexity), true

	case "CharacterItems.trinket2":
		if e.complexity.CharacterItems.Trinket2 == nil {
			break
		}

		return e.complexity.CharacterItems.Trinket2(childComplexity), true

	case "CharacterItems.mainHand":
		if e.complexity.CharacterItems.MainHand == nil {
			break
		}

		return e.complexity.CharacterItems.MainHand(childComplexity), true

	case "CharacterItems.offHand":
		if e.complexity.CharacterItems.OffHand == nil {
			break
		}

		return e.complexity.CharacterItems.OffHand(childComplexity), true

	case "CharacterMounts.numCollected":
		if e.complexity.CharacterMounts.NumCollected == nil {
			break
		}

		return e.complexity.CharacterMounts.NumCollected(childComplexity), true

	case "CharacterMounts.numNotCollected":
		if e.complexity.CharacterMounts.NumNotCollected == nil {
			break
		}

		return e.complexity.CharacterMounts.NumNotCollected(childComplexity), true

	case "CharacterMounts.collected":
		if e.complexity.CharacterMounts.Collected == nil {
			break
		}

		return e.complexity.CharacterMounts.Collected(childComplexity), true

	case "CharacterPets.numCollected":
		if e.complexity.CharacterPets.NumCollected == nil {
			break
		}

		return e.complexity.CharacterPets.NumCollected(childComplexity), true

	case "CharacterPets.numNotCollected":
		if e.complexity.CharacterPets.NumNotCollected == nil {
			break
		}

		return e.complexity.CharacterPets.NumNotCollected(childComplexity), true

	case "CharacterPets.collected":
		if e.complexity.CharacterPets.Collected == nil {
			break
		}

		return e.complexity.CharacterPets.Collected(childComplexity), true

	case "CharacterProfessions.primary":
		if e.complexity.CharacterProfessions.Primary == nil {
			break
		}

		return e.complexity.CharacterProfessions.Primary(childComplexity), true

	case "CharacterProfessions.secondary":
		if e.complexity.CharacterProfessions.Secondary == nil {
			break
		}

		return e.complexity.CharacterProfessions.Secondary(childComplexity), true

	case "CharacterStats.health":
		if e.complexity.CharacterStats.Health == nil {
			break
		}

		return e.complexity.CharacterStats.Health(childComplexity), true

	case "CharacterStats.powerType":
		if e.complexity.CharacterStats.PowerType == nil {
			break
		}

		return e.complexity.CharacterStats.PowerType(childComplexity), true

	case "CharacterStats.power":
		if e.complexity.CharacterStats.Power == nil {
			break
		}

		return e.complexity.CharacterStats.Power(childComplexity), true

	case "CharacterStats.str":
		if e.complexity.CharacterStats.Str == nil {
			break
		}

		return e.complexity.CharacterStats.Str(childComplexity), true

	case "CharacterStats.agi":
		if e.complexity.CharacterStats.Agi == nil {
			break
		}

		return e.complexity.CharacterStats.Agi(childComplexity), true

	case "CharacterStats.int":
		if e.complexity.CharacterStats.Int == nil {
			break
		}

		return e.complexity.CharacterStats.Int(childComplexity), true

	case "CharacterStats.sta":
		if e.complexity.CharacterStats.Sta == nil {
			break
		}

		return e.complexity.CharacterStats.Sta(childComplexity), true

	case "CharacterStats.speedRating":
		if e.complexity.CharacterStats.SpeedRating == nil {
			break
		}

		return e.complexity.CharacterStats.SpeedRating(childComplexity), true

	case "CharacterStats.speedRatingBonus":
		if e.complexity.CharacterStats.SpeedRatingBonus == nil {
			break
		}

		return e.complexity.CharacterStats.SpeedRatingBonus(childComplexity), true

	case "CharacterStats.crit":
		if e.complexity.CharacterStats.Crit == nil {
			break
		}

		return e.complexity.CharacterStats.Crit(childComplexity), true

	case "CharacterStats.critRating":
		if e.complexity.CharacterStats.CritRating == nil {
			break
		}

		return e.complexity.CharacterStats.CritRating(childComplexity), true

	case "CharacterStats.haste":
		if e.complexity.CharacterStats.Haste == nil {
			break
		}

		return e.complexity.CharacterStats.Haste(childComplexity), true

	case "CharacterStats.hasteRating":
		if e.complexity.CharacterStats.HasteRating == nil {
			break
		}

		return e.complexity.CharacterStats.HasteRating(childComplexity), true

	case "CharacterStats.hasteRatingPercent":
		if e.complexity.CharacterStats.HasteRatingPercent == nil {
			break
		}

		return e.complexity.CharacterStats.HasteRatingPercent(childComplexity), true

	case "CharacterStats.mastery":
		if e.complexity.CharacterStats.Mastery == nil {
			break
		}

		return e.complexity.CharacterStats.Mastery(childComplexity), true

	case "CharacterStats.masteryRating":
		if e.complexity.CharacterStats.MasteryRating == nil {
			break
		}

		return e.complexity.CharacterStats.MasteryRating(childComplexity), true

	case "CharacterStats.leech":
		if e.complexity.CharacterStats.Leech == nil {
			break
		}

		return e.complexity.CharacterStats.Leech(childComplexity), true

	case "CharacterStats.leechRating":
		if e.complexity.CharacterStats.LeechRating == nil {
			break
		}

		return e.complexity.CharacterStats.LeechRating(childComplexity), true

	case "CharacterStats.leechRatingBonus":
		if e.complexity.CharacterStats.LeechRatingBonus == nil {
			break
		}

		return e.complexity.CharacterStats.LeechRatingBonus(childComplexity), true

	case "CharacterStats.versatility":
		if e.complexity.CharacterStats.Versatility == nil {
			break
		}

		return e.complexity.CharacterStats.Versatility(childComplexity), true

	case "CharacterStats.versatilityDamageDoneBonus":
		if e.complexity.CharacterStats.VersatilityDamageDoneBonus == nil {
			break
		}

		return e.complexity.CharacterStats.VersatilityDamageDoneBonus(childComplexity), true

	case "CharacterStats.versatilityHealingDoneBonus":
		if e.complexity.CharacterStats.VersatilityHealingDoneBonus == nil {
			break
		}

		return e.complexity.CharacterStats.VersatilityHealingDoneBonus(childComplexity), true

	case "CharacterStats.versatilityDamageTakenBonus":
		if e.complexity.CharacterStats.VersatilityDamageTakenBonus == nil {
			break
		}

		return e.complexity.CharacterStats.VersatilityDamageTakenBonus(childComplexity), true

	case "CharacterStats.avoidanceRating":
		if e.complexity.CharacterStats.AvoidanceRating == nil {
			break
		}

		return e.complexity.CharacterStats.AvoidanceRating(childComplexity), true

	case "CharacterStats.avoidanceRatingBonus":
		if e.complexity.CharacterStats.AvoidanceRatingBonus == nil {
			break
		}

		return e.complexity.CharacterStats.AvoidanceRatingBonus(childComplexity), true

	case "CharacterStats.spellPen":
		if e.complexity.CharacterStats.SpellPen == nil {
			break
		}

		return e.complexity.CharacterStats.SpellPen(childComplexity), true

	case "CharacterStats.spellCrit":
		if e.complexity.CharacterStats.SpellCrit == nil {
			break
		}

		return e.complexity.CharacterStats.SpellCrit(childComplexity), true

	case "CharacterStats.spellCritRating":
		if e.complexity.CharacterStats.SpellCritRating == nil {
			break
		}

		return e.complexity.CharacterStats.SpellCritRating(childComplexity), true

	case "CharacterStats.mana5":
		if e.complexity.CharacterStats.Mana5 == nil {
			break
		}

		return e.complexity.CharacterStats.Mana5(childComplexity), true

	case "CharacterStats.mana5Combat":
		if e.complexity.CharacterStats.Mana5Combat == nil {
			break
		}

		return e.complexity.CharacterStats.Mana5Combat(childComplexity), true

	case "CharacterStats.armor":
		if e.complexity.CharacterStats.Armor == nil {
			break
		}

		return e.complexity.CharacterStats.Armor(childComplexity), true

	case "CharacterStats.dodge":
		if e.complexity.CharacterStats.Dodge == nil {
			break
		}

		return e.complexity.CharacterStats.Dodge(childComplexity), true

	case "CharacterStats.dodgeRating":
		if e.complexity.CharacterStats.DodgeRating == nil {
			break
		}

		return e.complexity.CharacterStats.DodgeRating(childComplexity), true

	case "CharacterStats.parry":
		if e.complexity.CharacterStats.Parry == nil {
			break
		}

		return e.complexity.CharacterStats.Parry(childComplexity), true

	case "CharacterStats.parryRating":
		if e.complexity.CharacterStats.ParryRating == nil {
			break
		}

		return e.complexity.CharacterStats.ParryRating(childComplexity), true

	case "CharacterStats.block":
		if e.complexity.CharacterStats.Block == nil {
			break
		}

		return e.complexity.CharacterStats.Block(childComplexity), true

	case "CharacterStats.blockRating":
		if e.complexity.CharacterStats.BlockRating == nil {
			break
		}

		return e.complexity.CharacterStats.BlockRating(childComplexity), true

	case "CharacterStats.mainHandDmgMin":
		if e.complexity.CharacterStats.MainHandDmgMin == nil {
			break
		}

		return e.complexity.CharacterStats.MainHandDmgMin(childComplexity), true

	case "CharacterStats.mainHandDmgMax":
		if e.complexity.CharacterStats.MainHandDmgMax == nil {
			break
		}

		return e.complexity.CharacterStats.MainHandDmgMax(childComplexity), true

	case "CharacterStats.mainHandSpeed":
		if e.complexity.CharacterStats.MainHandSpeed == nil {
			break
		}

		return e.complexity.CharacterStats.MainHandSpeed(childComplexity), true

	case "CharacterStats.mainHandDps":
		if e.complexity.CharacterStats.MainHandDps == nil {
			break
		}

		return e.complexity.CharacterStats.MainHandDps(childComplexity), true

	case "CharacterStats.offHandDmgMin":
		if e.complexity.CharacterStats.OffHandDmgMin == nil {
			break
		}

		return e.complexity.CharacterStats.OffHandDmgMin(childComplexity), true

	case "CharacterStats.offHandDmgMax":
		if e.complexity.CharacterStats.OffHandDmgMax == nil {
			break
		}

		return e.complexity.CharacterStats.OffHandDmgMax(childComplexity), true

	case "CharacterStats.offHandSpeed":
		if e.complexity.CharacterStats.OffHandSpeed == nil {
			break
		}

		return e.complexity.CharacterStats.OffHandSpeed(childComplexity), true

	case "CharacterStats.offHandDps":
		if e.complexity.CharacterStats.OffHandDps == nil {
			break
		}

		return e.complexity.CharacterStats.OffHandDps(childComplexity), true

	case "CharacterStats.rangedDmgMin":
		if e.complexity.CharacterStats.RangedDmgMin == nil {
			break
		}

		return e.complexity.CharacterStats.RangedDmgMin(childComplexity), true

	case "CharacterStats.rangedDmgMax":
		if e.complexity.CharacterStats.RangedDmgMax == nil {
			break
		}

		return e.complexity.CharacterStats.RangedDmgMax(childComplexity), true

	case "CharacterStats.rangedSpeed":
		if e.complexity.CharacterStats.RangedSpeed == nil {
			break
		}

		return e.complexity.CharacterStats.RangedSpeed(childComplexity), true

	case "CharacterStats.rangedDps":
		if e.complexity.CharacterStats.RangedDps == nil {
			break
		}

		return e.complexity.CharacterStats.RangedDps(childComplexity), true

	case "Icons.small":
		if e.complexity.Icons.Small == nil {
			break
		}

		return e.complexity.Icons.Small(childComplexity), true

	case "Icons.medium":
		if e.complexity.Icons.Medium == nil {
			break
		}

		return e.complexity.Icons.Medium(childComplexity), true

	case "Icons.large":
		if e.complexity.Icons.Large == nil {
			break
		}

		return e.complexity.Icons.Large(childComplexity), true

	case "Item.id":
		if e.complexity.Item.Id == nil {
			break
		}

		return e.complexity.Item.Id(childComplexity), true

	case "Item.name":
		if e.complexity.Item.Name == nil {
			break
		}

		return e.complexity.Item.Name(childComplexity), true

	case "Item.icon":
		if e.complexity.Item.Icon == nil {
			break
		}

		return e.complexity.Item.Icon(childComplexity), true

	case "Item.quality":
		if e.complexity.Item.Quality == nil {
			break
		}

		return e.complexity.Item.Quality(childComplexity), true

	case "Item.itemLevel":
		if e.complexity.Item.ItemLevel == nil {
			break
		}

		return e.complexity.Item.ItemLevel(childComplexity), true

	case "Item.tooltipParams":
		if e.complexity.Item.TooltipParams == nil {
			break
		}

		return e.complexity.Item.TooltipParams(childComplexity), true

	case "Item.stats":
		if e.complexity.Item.Stats == nil {
			break
		}

		return e.complexity.Item.Stats(childComplexity), true

	case "Item.armor":
		if e.complexity.Item.Armor == nil {
			break
		}

		return e.complexity.Item.Armor(childComplexity), true

	case "Item.context":
		if e.complexity.Item.Context == nil {
			break
		}

		return e.complexity.Item.Context(childComplexity), true

	case "Item.bonusLists":
		if e.complexity.Item.BonusLists == nil {
			break
		}

		return e.complexity.Item.BonusLists(childComplexity), true

	case "Item.artifactId":
		if e.complexity.Item.ArtifactId == nil {
			break
		}

		return e.complexity.Item.ArtifactId(childComplexity), true

	case "Item.displayInfoId":
		if e.complexity.Item.DisplayInfoId == nil {
			break
		}

		return e.complexity.Item.DisplayInfoId(childComplexity), true

	case "Item.artifactAppearanceId":
		if e.complexity.Item.ArtifactAppearanceId == nil {
			break
		}

		return e.complexity.Item.ArtifactAppearanceId(childComplexity), true

	case "Item.appearance":
		if e.complexity.Item.Appearance == nil {
			break
		}

		return e.complexity.Item.Appearance(childComplexity), true

	case "Item.azeriteItem":
		if e.complexity.Item.AzeriteItem == nil {
			break
		}

		return e.complexity.Item.AzeriteItem(childComplexity), true

	case "Item.azeriteEmpoweredItem":
		if e.complexity.Item.AzeriteEmpoweredItem == nil {
			break
		}

		return e.complexity.Item.AzeriteEmpoweredItem(childComplexity), true

	case "ItemStat.stat":
		if e.complexity.ItemStat.Stat == nil {
			break
		}

		return e.complexity.ItemStat.Stat(childComplexity), true

	case "ItemStat.amount":
		if e.complexity.ItemStat.Amount == nil {
			break
		}

		return e.complexity.ItemStat.Amount(childComplexity), true

	case "ItemTooltipParams.transmogItem":
		if e.complexity.ItemTooltipParams.TransmogItem == nil {
			break
		}

		return e.complexity.ItemTooltipParams.TransmogItem(childComplexity), true

	case "ItemTooltipParams.timewalkerLevel":
		if e.complexity.ItemTooltipParams.TimewalkerLevel == nil {
			break
		}

		return e.complexity.ItemTooltipParams.TimewalkerLevel(childComplexity), true

	case "ItemTooltipParams.azeritePower0":
		if e.complexity.ItemTooltipParams.AzeritePower0 == nil {
			break
		}

		return e.complexity.ItemTooltipParams.AzeritePower0(childComplexity), true

	case "ItemTooltipParams.azeritePower1":
		if e.complexity.ItemTooltipParams.AzeritePower1 == nil {
			break
		}

		return e.complexity.ItemTooltipParams.AzeritePower1(childComplexity), true

	case "ItemTooltipParams.azeritePower2":
		if e.complexity.ItemTooltipParams.AzeritePower2 == nil {
			break
		}

		return e.complexity.ItemTooltipParams.AzeritePower2(childComplexity), true

	case "ItemTooltipParams.azeritePower3":
		if e.complexity.ItemTooltipParams.AzeritePower3 == nil {
			break
		}

		return e.complexity.ItemTooltipParams.AzeritePower3(childComplexity), true

	case "ItemTooltipParams.azeritePower4":
		if e.complexity.ItemTooltipParams.AzeritePower4 == nil {
			break
		}

		return e.complexity.ItemTooltipParams.AzeritePower4(childComplexity), true

	case "ItemTooltipParams.azeritePowerLevel":
		if e.complexity.ItemTooltipParams.AzeritePowerLevel == nil {
			break
		}

		return e.complexity.ItemTooltipParams.AzeritePowerLevel(childComplexity), true

	case "Mount.name":
		if e.complexity.Mount.Name == nil {
			break
		}

		return e.complexity.Mount.Name(childComplexity), true

	case "Mount.spellId":
		if e.complexity.Mount.SpellId == nil {
			break
		}

		return e.complexity.Mount.SpellId(childComplexity), true

	case "Mount.creatureId":
		if e.complexity.Mount.CreatureId == nil {
			break
		}

		return e.complexity.Mount.CreatureId(childComplexity), true

	case "Mount.itemId":
		if e.complexity.Mount.ItemId == nil {
			break
		}

		return e.complexity.Mount.ItemId(childComplexity), true

	case "Mount.wowheadURL":
		if e.complexity.Mount.WowheadUrl == nil {
			break
		}

		return e.complexity.Mount.WowheadUrl(childComplexity), true

	case "Mount.qualityId":
		if e.complexity.Mount.QualityId == nil {
			break
		}

		return e.complexity.Mount.QualityId(childComplexity), true

	case "Mount.icons":
		if e.complexity.Mount.Icons == nil {
			break
		}

		return e.complexity.Mount.Icons(childComplexity), true

	case "Mount.isGround":
		if e.complexity.Mount.IsGround == nil {
			break
		}

		return e.complexity.Mount.IsGround(childComplexity), true

	case "Mount.isFlying":
		if e.complexity.Mount.IsFlying == nil {
			break
		}

		return e.complexity.Mount.IsFlying(childComplexity), true

	case "Mount.isAquatic":
		if e.complexity.Mount.IsAquatic == nil {
			break
		}

		return e.complexity.Mount.IsAquatic(childComplexity), true

	case "Mount.isJumping":
		if e.complexity.Mount.IsJumping == nil {
			break
		}

		return e.complexity.Mount.IsJumping(childComplexity), true

	case "Pet.name":
		if e.complexity.Pet.Name == nil {
			break
		}

		return e.complexity.Pet.Name(childComplexity), true

	case "Pet.spellId":
		if e.complexity.Pet.SpellId == nil {
			break
		}

		return e.complexity.Pet.SpellId(childComplexity), true

	case "Pet.creatureId":
		if e.complexity.Pet.CreatureId == nil {
			break
		}

		return e.complexity.Pet.CreatureId(childComplexity), true

	case "Pet.itemId":
		if e.complexity.Pet.ItemId == nil {
			break
		}

		return e.complexity.Pet.ItemId(childComplexity), true

	case "Pet.qualityId":
		if e.complexity.Pet.QualityId == nil {
			break
		}

		return e.complexity.Pet.QualityId(childComplexity), true

	case "Pet.icon":
		if e.complexity.Pet.Icon == nil {
			break
		}

		return e.complexity.Pet.Icon(childComplexity), true

	case "Pet.stats":
		if e.complexity.Pet.Stats == nil {
			break
		}

		return e.complexity.Pet.Stats(childComplexity), true

	case "Pet.battlePetGuid":
		if e.complexity.Pet.BattlePetGuid == nil {
			break
		}

		return e.complexity.Pet.BattlePetGuid(childComplexity), true

	case "Pet.isFavorite":
		if e.complexity.Pet.IsFavorite == nil {
			break
		}

		return e.complexity.Pet.IsFavorite(childComplexity), true

	case "Pet.isFirstAbilitySlotSelected":
		if e.complexity.Pet.IsFirstAbilitySlotSelected == nil {
			break
		}

		return e.complexity.Pet.IsFirstAbilitySlotSelected(childComplexity), true

	case "Pet.isSecondAbilitySlotSelected":
		if e.complexity.Pet.IsSecondAbilitySlotSelected == nil {
			break
		}

		return e.complexity.Pet.IsSecondAbilitySlotSelected(childComplexity), true

	case "Pet.isThirdAbilitySlotSelected":
		if e.complexity.Pet.IsThirdAbilitySlotSelected == nil {
			break
		}

		return e.complexity.Pet.IsThirdAbilitySlotSelected(childComplexity), true

	case "Pet.creatureName":
		if e.complexity.Pet.CreatureName == nil {
			break
		}

		return e.complexity.Pet.CreatureName(childComplexity), true

	case "Pet.canBattle":
		if e.complexity.Pet.CanBattle == nil {
			break
		}

		return e.complexity.Pet.CanBattle(childComplexity), true

	case "PetStats.speciesId":
		if e.complexity.PetStats.SpeciesId == nil {
			break
		}

		return e.complexity.PetStats.SpeciesId(childComplexity), true

	case "PetStats.breedId":
		if e.complexity.PetStats.BreedId == nil {
			break
		}

		return e.complexity.PetStats.BreedId(childComplexity), true

	case "PetStats.petQualityId":
		if e.complexity.PetStats.PetQualityId == nil {
			break
		}

		return e.complexity.PetStats.PetQualityId(childComplexity), true

	case "PetStats.level":
		if e.complexity.PetStats.Level == nil {
			break
		}

		return e.complexity.PetStats.Level(childComplexity), true

	case "PetStats.health":
		if e.complexity.PetStats.Health == nil {
			break
		}

		return e.complexity.PetStats.Health(childComplexity), true

	case "PetStats.power":
		if e.complexity.PetStats.Power == nil {
			break
		}

		return e.complexity.PetStats.Power(childComplexity), true

	case "PetStats.speed":
		if e.complexity.PetStats.Speed == nil {
			break
		}

		return e.complexity.PetStats.Speed(childComplexity), true

	case "Profession.id":
		if e.complexity.Profession.Id == nil {
			break
		}

		return e.complexity.Profession.Id(childComplexity), true

	case "Profession.name":
		if e.complexity.Profession.Name == nil {
			break
		}

		return e.complexity.Profession.Name(childComplexity), true

	case "Profession.icon":
		if e.complexity.Profession.Icon == nil {
			break
		}

		return e.complexity.Profession.Icon(childComplexity), true

	case "Profession.rank":
		if e.complexity.Profession.Rank == nil {
			break
		}

		return e.complexity.Profession.Rank(childComplexity), true

	case "Profession.max":
		if e.complexity.Profession.Max == nil {
			break
		}

		return e.complexity.Profession.Max(childComplexity), true

	case "Profession.recipes":
		if e.complexity.Profession.Recipes == nil {
			break
		}

		return e.complexity.Profession.Recipes(childComplexity), true

	case "Query.character":
		if e.complexity.Query.Character == nil {
			break
		}

		args, err := field_Query_character_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Character(childComplexity, args["input"].(CharacterQueryInput)), true

	case "Query.mounts":
		if e.complexity.Query.Mounts == nil {
			break
		}

		args, err := field_Query_mounts_args(rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Mounts(childComplexity, args["input"].(SearchInput)), true

	case "Reputation.id":
		if e.complexity.Reputation.Id == nil {
			break
		}

		return e.complexity.Reputation.Id(childComplexity), true

	case "Reputation.name":
		if e.complexity.Reputation.Name == nil {
			break
		}

		return e.complexity.Reputation.Name(childComplexity), true

	case "Reputation.standing":
		if e.complexity.Reputation.Standing == nil {
			break
		}

		return e.complexity.Reputation.Standing(childComplexity), true

	case "Reputation.value":
		if e.complexity.Reputation.Value == nil {
			break
		}

		return e.complexity.Reputation.Value(childComplexity), true

	case "Reputation.max":
		if e.complexity.Reputation.Max == nil {
			break
		}

		return e.complexity.Reputation.Max(childComplexity), true

	case "TransmogItem.itemId":
		if e.complexity.TransmogItem.ItemId == nil {
			break
		}

		return e.complexity.TransmogItem.ItemId(childComplexity), true

	case "TransmogItem.itemAppearanceModId":
		if e.complexity.TransmogItem.ItemAppearanceModId == nil {
			break
		}

		return e.complexity.TransmogItem.ItemAppearanceModId(childComplexity), true

	case "TransmogItem.transmogItemAppearanceModId":
		if e.complexity.TransmogItem.TransmogItemAppearanceModId == nil {
			break
		}

		return e.complexity.TransmogItem.TransmogItemAppearanceModId(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:       buf,
		Errors:     ec.Errors,
		Extensions: ec.Extensions}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	return graphql.ErrorResponse(ctx, "mutations are not supported")
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

var achievementImplementors = []string{"Achievement"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Achievement(ctx context.Context, sel ast.SelectionSet, obj *Achievement) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, achievementImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Achievement")
		case "id":
			out.Values[i] = ec._Achievement_id(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Achievement_title(ctx, field, obj)
		case "points":
			out.Values[i] = ec._Achievement_points(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Achievement_description(ctx, field, obj)
		case "icon":
			out.Values[i] = ec._Achievement_icon(ctx, field, obj)
		case "criteria":
			out.Values[i] = ec._Achievement_criteria(ctx, field, obj)
		case "accountWide":
			out.Values[i] = ec._Achievement_accountWide(ctx, field, obj)
		case "factionId":
			out.Values[i] = ec._Achievement_factionId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Achievement_id(ctx context.Context, field graphql.CollectedField, obj *Achievement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Achievement",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Achievement_title(ctx context.Context, field graphql.CollectedField, obj *Achievement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Achievement",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Achievement_points(ctx context.Context, field graphql.CollectedField, obj *Achievement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Achievement",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Points, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Achievement_description(ctx context.Context, field graphql.CollectedField, obj *Achievement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Achievement",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Achievement_icon(ctx context.Context, field graphql.CollectedField, obj *Achievement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Achievement",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Achievement_criteria(ctx context.Context, field graphql.CollectedField, obj *Achievement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Achievement",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Criteria, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AchievementCriteria)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._AchievementCriteria(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Achievement_accountWide(ctx context.Context, field graphql.CollectedField, obj *Achievement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Achievement",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccountWide, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Achievement_factionId(ctx context.Context, field graphql.CollectedField, obj *Achievement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Achievement",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FactionID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

var achievementCriteriaImplementors = []string{"AchievementCriteria"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _AchievementCriteria(ctx context.Context, sel ast.SelectionSet, obj *AchievementCriteria) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, achievementCriteriaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AchievementCriteria")
		case "id":
			out.Values[i] = ec._AchievementCriteria_id(ctx, field, obj)
		case "description":
			out.Values[i] = ec._AchievementCriteria_description(ctx, field, obj)
		case "orderIndex":
			out.Values[i] = ec._AchievementCriteria_orderIndex(ctx, field, obj)
		case "max":
			out.Values[i] = ec._AchievementCriteria_max(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _AchievementCriteria_id(ctx context.Context, field graphql.CollectedField, obj *AchievementCriteria) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "AchievementCriteria",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _AchievementCriteria_description(ctx context.Context, field graphql.CollectedField, obj *AchievementCriteria) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "AchievementCriteria",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _AchievementCriteria_orderIndex(ctx context.Context, field graphql.CollectedField, obj *AchievementCriteria) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "AchievementCriteria",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrderIndex, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _AchievementCriteria_max(ctx context.Context, field graphql.CollectedField, obj *AchievementCriteria) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "AchievementCriteria",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

var azeriteEmpoweredItemImplementors = []string{"AzeriteEmpoweredItem"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _AzeriteEmpoweredItem(ctx context.Context, sel ast.SelectionSet, obj *AzeriteEmpoweredItem) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, azeriteEmpoweredItemImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AzeriteEmpoweredItem")
		case "azeritePowers":
			out.Values[i] = ec._AzeriteEmpoweredItem_azeritePowers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _AzeriteEmpoweredItem_azeritePowers(ctx context.Context, field graphql.CollectedField, obj *AzeriteEmpoweredItem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "AzeriteEmpoweredItem",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AzeritePowers, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*AzeritePower)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._AzeritePower(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var azeriteItemImplementors = []string{"AzeriteItem"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _AzeriteItem(ctx context.Context, sel ast.SelectionSet, obj *AzeriteItem) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, azeriteItemImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AzeriteItem")
		case "azeriteLevel":
			out.Values[i] = ec._AzeriteItem_azeriteLevel(ctx, field, obj)
		case "azeriteExperience":
			out.Values[i] = ec._AzeriteItem_azeriteExperience(ctx, field, obj)
		case "azeriteExperienceRemaining":
			out.Values[i] = ec._AzeriteItem_azeriteExperienceRemaining(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _AzeriteItem_azeriteLevel(ctx context.Context, field graphql.CollectedField, obj *AzeriteItem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "AzeriteItem",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AzeriteLevel, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _AzeriteItem_azeriteExperience(ctx context.Context, field graphql.CollectedField, obj *AzeriteItem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "AzeriteItem",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AzeriteExperience, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _AzeriteItem_azeriteExperienceRemaining(ctx context.Context, field graphql.CollectedField, obj *AzeriteItem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "AzeriteItem",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AzeriteExperienceRemaining, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

var azeritePowerImplementors = []string{"AzeritePower"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _AzeritePower(ctx context.Context, sel ast.SelectionSet, obj *AzeritePower) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, azeritePowerImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AzeritePower")
		case "id":
			out.Values[i] = ec._AzeritePower_id(ctx, field, obj)
		case "tier":
			out.Values[i] = ec._AzeritePower_tier(ctx, field, obj)
		case "spellId":
			out.Values[i] = ec._AzeritePower_spellId(ctx, field, obj)
		case "bonusListId":
			out.Values[i] = ec._AzeritePower_bonusListId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _AzeritePower_id(ctx context.Context, field graphql.CollectedField, obj *AzeritePower) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "AzeritePower",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _AzeritePower_tier(ctx context.Context, field graphql.CollectedField, obj *AzeritePower) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "AzeritePower",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tier, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _AzeritePower_spellId(ctx context.Context, field graphql.CollectedField, obj *AzeritePower) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "AzeritePower",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpellID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _AzeritePower_bonusListId(ctx context.Context, field graphql.CollectedField, obj *AzeritePower) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "AzeritePower",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BonusListID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

var characterImplementors = []string{"Character"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Character(ctx context.Context, sel ast.SelectionSet, obj *Character) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, characterImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Character")
		case "lastModified":
			out.Values[i] = ec._Character_lastModified(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Character_name(ctx, field, obj)
		case "realm":
			out.Values[i] = ec._Character_realm(ctx, field, obj)
		case "battlegroup":
			out.Values[i] = ec._Character_battlegroup(ctx, field, obj)
		case "class":
			out.Values[i] = ec._Character_class(ctx, field, obj)
		case "race":
			out.Values[i] = ec._Character_race(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._Character_gender(ctx, field, obj)
		case "level":
			out.Values[i] = ec._Character_level(ctx, field, obj)
		case "achievementPoints":
			out.Values[i] = ec._Character_achievementPoints(ctx, field, obj)
		case "thumbnail":
			out.Values[i] = ec._Character_thumbnail(ctx, field, obj)
		case "calcClass":
			out.Values[i] = ec._Character_calcClass(ctx, field, obj)
		case "faction":
			out.Values[i] = ec._Character_faction(ctx, field, obj)
		case "totalHonorableKills":
			out.Values[i] = ec._Character_totalHonorableKills(ctx, field, obj)
		case "feed":
			out.Values[i] = ec._Character_feed(ctx, field, obj)
		case "pets":
			out.Values[i] = ec._Character_pets(ctx, field, obj)
		case "mounts":
			out.Values[i] = ec._Character_mounts(ctx, field, obj)
		case "averageItemLevel":
			out.Values[i] = ec._Character_averageItemLevel(ctx, field, obj)
		case "averageItemLevelInBags":
			out.Values[i] = ec._Character_averageItemLevelInBags(ctx, field, obj)
		case "items":
			out.Values[i] = ec._Character_items(ctx, field, obj)
		case "professions":
			out.Values[i] = ec._Character_professions(ctx, field, obj)
		case "reputation":
			out.Values[i] = ec._Character_reputation(ctx, field, obj)
		case "stats":
			out.Values[i] = ec._Character_stats(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Character_lastModified(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastModified, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_name(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_realm(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Realm, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_battlegroup(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Battlegroup, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_class(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Class(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_race(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Race(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_gender(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_level(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Level, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_achievementPoints(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AchievementPoints, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_thumbnail(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_calcClass(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CalcClass, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_faction(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Faction(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_totalHonorableKills(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalHonorableKills, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_feed(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Feed()
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*CharacterFeedItem)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._CharacterFeedItem(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Character_pets(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pets, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*CharacterPets)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._CharacterPets(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_mounts(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mounts, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*CharacterMounts)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._CharacterMounts(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_averageItemLevel(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AverageItemLevel(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_averageItemLevelInBags(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AverageItemLevelInBags(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_items(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*CharacterItems)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._CharacterItems(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_professions(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Professions, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*CharacterProfessions)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._CharacterProfessions(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Character_reputation(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reputation, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Reputation)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._Reputation(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Character_stats(ctx context.Context, field graphql.CollectedField, obj *Character) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Character",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stats, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*CharacterStats)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._CharacterStats(ctx, field.Selections, res)
}

var characterFeedAchievementImplementors = []string{"CharacterFeedAchievement"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _CharacterFeedAchievement(ctx context.Context, sel ast.SelectionSet, obj *CharacterFeedAchievement) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, characterFeedAchievementImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharacterFeedAchievement")
		case "type":
			out.Values[i] = ec._CharacterFeedAchievement_type(ctx, field, obj)
		case "timestamp":
			out.Values[i] = ec._CharacterFeedAchievement_timestamp(ctx, field, obj)
		case "achievement":
			out.Values[i] = ec._CharacterFeedAchievement_achievement(ctx, field, obj)
		case "featOfStrength":
			out.Values[i] = ec._CharacterFeedAchievement_featOfStrength(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedAchievement_type(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedAchievement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedAchievement",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*CharacterFeedItemType)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return *res
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedAchievement_timestamp(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedAchievement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedAchievement",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedAchievement_achievement(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedAchievement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedAchievement",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Achievement, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Achievement)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Achievement(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedAchievement_featOfStrength(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedAchievement) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedAchievement",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeatOfStrength, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

var characterFeedBossKillImplementors = []string{"CharacterFeedBossKill"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _CharacterFeedBossKill(ctx context.Context, sel ast.SelectionSet, obj *CharacterFeedBossKill) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, characterFeedBossKillImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharacterFeedBossKill")
		case "type":
			out.Values[i] = ec._CharacterFeedBossKill_type(ctx, field, obj)
		case "timestamp":
			out.Values[i] = ec._CharacterFeedBossKill_timestamp(ctx, field, obj)
		case "achievement":
			out.Values[i] = ec._CharacterFeedBossKill_achievement(ctx, field, obj)
		case "featOfStrength":
			out.Values[i] = ec._CharacterFeedBossKill_featOfStrength(ctx, field, obj)
		case "criteria":
			out.Values[i] = ec._CharacterFeedBossKill_criteria(ctx, field, obj)
		case "quantity":
			out.Values[i] = ec._CharacterFeedBossKill_quantity(ctx, field, obj)
		case "name":
			out.Values[i] = ec._CharacterFeedBossKill_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedBossKill_type(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedBossKill) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedBossKill",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*CharacterFeedItemType)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return *res
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedBossKill_timestamp(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedBossKill) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedBossKill",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedBossKill_achievement(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedBossKill) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedBossKill",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Achievement, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Achievement)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Achievement(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedBossKill_featOfStrength(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedBossKill) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedBossKill",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeatOfStrength, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedBossKill_criteria(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedBossKill) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedBossKill",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Criteria, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*AchievementCriteria)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._AchievementCriteria(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedBossKill_quantity(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedBossKill) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedBossKill",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quantity, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedBossKill_name(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedBossKill) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedBossKill",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var characterFeedCriteriaImplementors = []string{"CharacterFeedCriteria"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _CharacterFeedCriteria(ctx context.Context, sel ast.SelectionSet, obj *CharacterFeedCriteria) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, characterFeedCriteriaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharacterFeedCriteria")
		case "type":
			out.Values[i] = ec._CharacterFeedCriteria_type(ctx, field, obj)
		case "timestamp":
			out.Values[i] = ec._CharacterFeedCriteria_timestamp(ctx, field, obj)
		case "achievement":
			out.Values[i] = ec._CharacterFeedCriteria_achievement(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedCriteria_type(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedCriteria) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedCriteria",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*CharacterFeedItemType)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return *res
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedCriteria_timestamp(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedCriteria) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedCriteria",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedCriteria_achievement(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedCriteria) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedCriteria",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Achievement, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Achievement)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Achievement(ctx, field.Selections, res)
}

var characterFeedLootImplementors = []string{"CharacterFeedLoot"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _CharacterFeedLoot(ctx context.Context, sel ast.SelectionSet, obj *CharacterFeedLoot) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, characterFeedLootImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharacterFeedLoot")
		case "type":
			out.Values[i] = ec._CharacterFeedLoot_type(ctx, field, obj)
		case "timestamp":
			out.Values[i] = ec._CharacterFeedLoot_timestamp(ctx, field, obj)
		case "itemId":
			out.Values[i] = ec._CharacterFeedLoot_itemId(ctx, field, obj)
		case "context":
			out.Values[i] = ec._CharacterFeedLoot_context(ctx, field, obj)
		case "bonusLists":
			out.Values[i] = ec._CharacterFeedLoot_bonusLists(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedLoot_type(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedLoot) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedLoot",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*CharacterFeedItemType)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return *res
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedLoot_timestamp(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedLoot) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedLoot",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedLoot_itemId(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedLoot) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedLoot",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedLoot_context(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedLoot) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedLoot",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Context, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterFeedLoot_bonusLists(ctx context.Context, field graphql.CollectedField, obj *CharacterFeedLoot) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterFeedLoot",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BonusLists, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {

			if res[idx1] == nil {
				return graphql.Null
			}
			return graphql.MarshalInt(*res[idx1])
		}()
	}

	return arr1
}

var characterItemsImplementors = []string{"CharacterItems"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _CharacterItems(ctx context.Context, sel ast.SelectionSet, obj *CharacterItems) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, characterItemsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharacterItems")
		case "head":
			out.Values[i] = ec._CharacterItems_head(ctx, field, obj)
		case "neck":
			out.Values[i] = ec._CharacterItems_neck(ctx, field, obj)
		case "shoulder":
			out.Values[i] = ec._CharacterItems_shoulder(ctx, field, obj)
		case "back":
			out.Values[i] = ec._CharacterItems_back(ctx, field, obj)
		case "chest":
			out.Values[i] = ec._CharacterItems_chest(ctx, field, obj)
		case "shirt":
			out.Values[i] = ec._CharacterItems_shirt(ctx, field, obj)
		case "tabard":
			out.Values[i] = ec._CharacterItems_tabard(ctx, field, obj)
		case "wrist":
			out.Values[i] = ec._CharacterItems_wrist(ctx, field, obj)
		case "hands":
			out.Values[i] = ec._CharacterItems_hands(ctx, field, obj)
		case "waist":
			out.Values[i] = ec._CharacterItems_waist(ctx, field, obj)
		case "legs":
			out.Values[i] = ec._CharacterItems_legs(ctx, field, obj)
		case "feet":
			out.Values[i] = ec._CharacterItems_feet(ctx, field, obj)
		case "finger1":
			out.Values[i] = ec._CharacterItems_finger1(ctx, field, obj)
		case "finger2":
			out.Values[i] = ec._CharacterItems_finger2(ctx, field, obj)
		case "trinket1":
			out.Values[i] = ec._CharacterItems_trinket1(ctx, field, obj)
		case "trinket2":
			out.Values[i] = ec._CharacterItems_trinket2(ctx, field, obj)
		case "mainHand":
			out.Values[i] = ec._CharacterItems_mainHand(ctx, field, obj)
		case "offHand":
			out.Values[i] = ec._CharacterItems_offHand(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_head(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Head, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_neck(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Neck, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_shoulder(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shoulder, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_back(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Back, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_chest(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chest, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_shirt(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shirt, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_tabard(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tabard, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_wrist(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Wrist, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_hands(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hands, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_waist(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Waist, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_legs(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Legs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_feet(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Feet, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_finger1(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finger1, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_finger2(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Finger2, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_trinket1(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trinket1, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_trinket2(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Trinket2, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_mainHand(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainHand, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterItems_offHand(ctx context.Context, field graphql.CollectedField, obj *CharacterItems) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterItems",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OffHand, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Item)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Item(ctx, field.Selections, res)
}

var characterMountsImplementors = []string{"CharacterMounts"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _CharacterMounts(ctx context.Context, sel ast.SelectionSet, obj *CharacterMounts) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, characterMountsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharacterMounts")
		case "numCollected":
			out.Values[i] = ec._CharacterMounts_numCollected(ctx, field, obj)
		case "numNotCollected":
			out.Values[i] = ec._CharacterMounts_numNotCollected(ctx, field, obj)
		case "collected":
			out.Values[i] = ec._CharacterMounts_collected(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _CharacterMounts_numCollected(ctx context.Context, field graphql.CollectedField, obj *CharacterMounts) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterMounts",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumCollected, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterMounts_numNotCollected(ctx context.Context, field graphql.CollectedField, obj *CharacterMounts) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterMounts",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumNotCollected, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterMounts_collected(ctx context.Context, field graphql.CollectedField, obj *CharacterMounts) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterMounts",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Collected, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Mount)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._Mount(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var characterPetsImplementors = []string{"CharacterPets"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _CharacterPets(ctx context.Context, sel ast.SelectionSet, obj *CharacterPets) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, characterPetsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharacterPets")
		case "numCollected":
			out.Values[i] = ec._CharacterPets_numCollected(ctx, field, obj)
		case "numNotCollected":
			out.Values[i] = ec._CharacterPets_numNotCollected(ctx, field, obj)
		case "collected":
			out.Values[i] = ec._CharacterPets_collected(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _CharacterPets_numCollected(ctx context.Context, field graphql.CollectedField, obj *CharacterPets) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterPets",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumCollected, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterPets_numNotCollected(ctx context.Context, field graphql.CollectedField, obj *CharacterPets) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterPets",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NumNotCollected, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterPets_collected(ctx context.Context, field graphql.CollectedField, obj *CharacterPets) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterPets",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Collected, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Pet)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._Pet(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var characterProfessionsImplementors = []string{"CharacterProfessions"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _CharacterProfessions(ctx context.Context, sel ast.SelectionSet, obj *CharacterProfessions) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, characterProfessionsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharacterProfessions")
		case "primary":
			out.Values[i] = ec._CharacterProfessions_primary(ctx, field, obj)
		case "secondary":
			out.Values[i] = ec._CharacterProfessions_secondary(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _CharacterProfessions_primary(ctx context.Context, field graphql.CollectedField, obj *CharacterProfessions) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterProfessions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Primary, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Profession)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._Profession(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _CharacterProfessions_secondary(ctx context.Context, field graphql.CollectedField, obj *CharacterProfessions) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterProfessions",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secondary, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Profession)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._Profession(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var characterStatsImplementors = []string{"CharacterStats"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _CharacterStats(ctx context.Context, sel ast.SelectionSet, obj *CharacterStats) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, characterStatsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharacterStats")
		case "health":
			out.Values[i] = ec._CharacterStats_health(ctx, field, obj)
		case "powerType":
			out.Values[i] = ec._CharacterStats_powerType(ctx, field, obj)
		case "power":
			out.Values[i] = ec._CharacterStats_power(ctx, field, obj)
		case "str":
			out.Values[i] = ec._CharacterStats_str(ctx, field, obj)
		case "agi":
			out.Values[i] = ec._CharacterStats_agi(ctx, field, obj)
		case "int":
			out.Values[i] = ec._CharacterStats_int(ctx, field, obj)
		case "sta":
			out.Values[i] = ec._CharacterStats_sta(ctx, field, obj)
		case "speedRating":
			out.Values[i] = ec._CharacterStats_speedRating(ctx, field, obj)
		case "speedRatingBonus":
			out.Values[i] = ec._CharacterStats_speedRatingBonus(ctx, field, obj)
		case "crit":
			out.Values[i] = ec._CharacterStats_crit(ctx, field, obj)
		case "critRating":
			out.Values[i] = ec._CharacterStats_critRating(ctx, field, obj)
		case "haste":
			out.Values[i] = ec._CharacterStats_haste(ctx, field, obj)
		case "hasteRating":
			out.Values[i] = ec._CharacterStats_hasteRating(ctx, field, obj)
		case "hasteRatingPercent":
			out.Values[i] = ec._CharacterStats_hasteRatingPercent(ctx, field, obj)
		case "mastery":
			out.Values[i] = ec._CharacterStats_mastery(ctx, field, obj)
		case "masteryRating":
			out.Values[i] = ec._CharacterStats_masteryRating(ctx, field, obj)
		case "leech":
			out.Values[i] = ec._CharacterStats_leech(ctx, field, obj)
		case "leechRating":
			out.Values[i] = ec._CharacterStats_leechRating(ctx, field, obj)
		case "leechRatingBonus":
			out.Values[i] = ec._CharacterStats_leechRatingBonus(ctx, field, obj)
		case "versatility":
			out.Values[i] = ec._CharacterStats_versatility(ctx, field, obj)
		case "versatilityDamageDoneBonus":
			out.Values[i] = ec._CharacterStats_versatilityDamageDoneBonus(ctx, field, obj)
		case "versatilityHealingDoneBonus":
			out.Values[i] = ec._CharacterStats_versatilityHealingDoneBonus(ctx, field, obj)
		case "versatilityDamageTakenBonus":
			out.Values[i] = ec._CharacterStats_versatilityDamageTakenBonus(ctx, field, obj)
		case "avoidanceRating":
			out.Values[i] = ec._CharacterStats_avoidanceRating(ctx, field, obj)
		case "avoidanceRatingBonus":
			out.Values[i] = ec._CharacterStats_avoidanceRatingBonus(ctx, field, obj)
		case "spellPen":
			out.Values[i] = ec._CharacterStats_spellPen(ctx, field, obj)
		case "spellCrit":
			out.Values[i] = ec._CharacterStats_spellCrit(ctx, field, obj)
		case "spellCritRating":
			out.Values[i] = ec._CharacterStats_spellCritRating(ctx, field, obj)
		case "mana5":
			out.Values[i] = ec._CharacterStats_mana5(ctx, field, obj)
		case "mana5Combat":
			out.Values[i] = ec._CharacterStats_mana5Combat(ctx, field, obj)
		case "armor":
			out.Values[i] = ec._CharacterStats_armor(ctx, field, obj)
		case "dodge":
			out.Values[i] = ec._CharacterStats_dodge(ctx, field, obj)
		case "dodgeRating":
			out.Values[i] = ec._CharacterStats_dodgeRating(ctx, field, obj)
		case "parry":
			out.Values[i] = ec._CharacterStats_parry(ctx, field, obj)
		case "parryRating":
			out.Values[i] = ec._CharacterStats_parryRating(ctx, field, obj)
		case "block":
			out.Values[i] = ec._CharacterStats_block(ctx, field, obj)
		case "blockRating":
			out.Values[i] = ec._CharacterStats_blockRating(ctx, field, obj)
		case "mainHandDmgMin":
			out.Values[i] = ec._CharacterStats_mainHandDmgMin(ctx, field, obj)
		case "mainHandDmgMax":
			out.Values[i] = ec._CharacterStats_mainHandDmgMax(ctx, field, obj)
		case "mainHandSpeed":
			out.Values[i] = ec._CharacterStats_mainHandSpeed(ctx, field, obj)
		case "mainHandDps":
			out.Values[i] = ec._CharacterStats_mainHandDps(ctx, field, obj)
		case "offHandDmgMin":
			out.Values[i] = ec._CharacterStats_offHandDmgMin(ctx, field, obj)
		case "offHandDmgMax":
			out.Values[i] = ec._CharacterStats_offHandDmgMax(ctx, field, obj)
		case "offHandSpeed":
			out.Values[i] = ec._CharacterStats_offHandSpeed(ctx, field, obj)
		case "offHandDps":
			out.Values[i] = ec._CharacterStats_offHandDps(ctx, field, obj)
		case "rangedDmgMin":
			out.Values[i] = ec._CharacterStats_rangedDmgMin(ctx, field, obj)
		case "rangedDmgMax":
			out.Values[i] = ec._CharacterStats_rangedDmgMax(ctx, field, obj)
		case "rangedSpeed":
			out.Values[i] = ec._CharacterStats_rangedSpeed(ctx, field, obj)
		case "rangedDps":
			out.Values[i] = ec._CharacterStats_rangedDps(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_health(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Health, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_powerType(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PowerType, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_power(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Power, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_str(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Str, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_agi(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Agi, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_int(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Int, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_sta(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sta, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_speedRating(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedRating, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_speedRatingBonus(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeedRatingBonus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_crit(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Crit, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_critRating(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CritRating, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_haste(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Haste, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_hasteRating(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasteRating, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_hasteRatingPercent(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasteRatingPercent, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_mastery(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mastery, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_masteryRating(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MasteryRating, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_leech(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Leech, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_leechRating(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeechRating, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_leechRatingBonus(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeechRatingBonus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_versatility(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Versatility, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_versatilityDamageDoneBonus(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VersatilityDamageDoneBonus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_versatilityHealingDoneBonus(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VersatilityHealingDoneBonus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_versatilityDamageTakenBonus(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VersatilityDamageTakenBonus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_avoidanceRating(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvoidanceRating, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_avoidanceRatingBonus(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvoidanceRatingBonus, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_spellPen(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpellPen, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_spellCrit(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpellCrit, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_spellCritRating(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpellCritRating, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_mana5(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mana5, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_mana5Combat(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mana5Combat, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_armor(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Armor, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_dodge(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dodge, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_dodgeRating(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DodgeRating, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_parry(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parry, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_parryRating(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParryRating, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_block(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Block, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_blockRating(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlockRating, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_mainHandDmgMin(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainHandDmgMin, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_mainHandDmgMax(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainHandDmgMax, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_mainHandSpeed(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainHandSpeed, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_mainHandDps(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MainHandDps, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_offHandDmgMin(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OffHandDmgMin, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_offHandDmgMax(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OffHandDmgMax, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_offHandSpeed(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OffHandSpeed, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_offHandDps(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OffHandDps, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_rangedDmgMin(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RangedDmgMin, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_rangedDmgMax(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RangedDmgMax, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_rangedSpeed(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RangedSpeed, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

// nolint: vetshadow
func (ec *executionContext) _CharacterStats_rangedDps(ctx context.Context, field graphql.CollectedField, obj *CharacterStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "CharacterStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RangedDps, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

var iconsImplementors = []string{"Icons"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Icons(ctx context.Context, sel ast.SelectionSet, obj *Icons) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, iconsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Icons")
		case "small":
			out.Values[i] = ec._Icons_small(ctx, field, obj)
		case "medium":
			out.Values[i] = ec._Icons_medium(ctx, field, obj)
		case "large":
			out.Values[i] = ec._Icons_large(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Icons_small(ctx context.Context, field graphql.CollectedField, obj *Icons) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Icons",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Small, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Icons_medium(ctx context.Context, field graphql.CollectedField, obj *Icons) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Icons",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Medium, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Icons_large(ctx context.Context, field graphql.CollectedField, obj *Icons) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Icons",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Large, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var itemImplementors = []string{"Item"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Item(ctx context.Context, sel ast.SelectionSet, obj *Item) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, itemImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Item")
		case "id":
			out.Values[i] = ec._Item_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Item_name(ctx, field, obj)
		case "icon":
			out.Values[i] = ec._Item_icon(ctx, field, obj)
		case "quality":
			out.Values[i] = ec._Item_quality(ctx, field, obj)
		case "itemLevel":
			out.Values[i] = ec._Item_itemLevel(ctx, field, obj)
		case "tooltipParams":
			out.Values[i] = ec._Item_tooltipParams(ctx, field, obj)
		case "stats":
			out.Values[i] = ec._Item_stats(ctx, field, obj)
		case "armor":
			out.Values[i] = ec._Item_armor(ctx, field, obj)
		case "context":
			out.Values[i] = ec._Item_context(ctx, field, obj)
		case "bonusLists":
			out.Values[i] = ec._Item_bonusLists(ctx, field, obj)
		case "artifactId":
			out.Values[i] = ec._Item_artifactId(ctx, field, obj)
		case "displayInfoId":
			out.Values[i] = ec._Item_displayInfoId(ctx, field, obj)
		case "artifactAppearanceId":
			out.Values[i] = ec._Item_artifactAppearanceId(ctx, field, obj)
		case "appearance":
			out.Values[i] = ec._Item_appearance(ctx, field, obj)
		case "azeriteItem":
			out.Values[i] = ec._Item_azeriteItem(ctx, field, obj)
		case "azeriteEmpoweredItem":
			out.Values[i] = ec._Item_azeriteEmpoweredItem(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Item_id(ctx context.Context, field graphql.CollectedField, obj *Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Item",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Item_name(ctx context.Context, field graphql.CollectedField, obj *Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Item",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Item_icon(ctx context.Context, field graphql.CollectedField, obj *Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Item",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Item_quality(ctx context.Context, field graphql.CollectedField, obj *Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Item",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Quality, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Item_itemLevel(ctx context.Context, field graphql.CollectedField, obj *Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Item",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemLevel, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Item_tooltipParams(ctx context.Context, field graphql.CollectedField, obj *Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Item",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TooltipParams, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ItemTooltipParams)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._ItemTooltipParams(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Item_stats(ctx context.Context, field graphql.CollectedField, obj *Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Item",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stats, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ItemStat)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._ItemStat(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Item_armor(ctx context.Context, field graphql.CollectedField, obj *Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Item",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Armor, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Item_context(ctx context.Context, field graphql.CollectedField, obj *Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Item",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Context, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Item_bonusLists(ctx context.Context, field graphql.CollectedField, obj *Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Item",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BonusLists, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {

			if res[idx1] == nil {
				return graphql.Null
			}
			return graphql.MarshalInt(*res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Item_artifactId(ctx context.Context, field graphql.CollectedField, obj *Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Item",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArtifactID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Item_displayInfoId(ctx context.Context, field graphql.CollectedField, obj *Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Item",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayInfoID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Item_artifactAppearanceId(ctx context.Context, field graphql.CollectedField, obj *Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Item",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArtifactAppearanceID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Item_appearance(ctx context.Context, field graphql.CollectedField, obj *Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Item",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Appearance, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*TransmogItem)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._TransmogItem(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Item_azeriteItem(ctx context.Context, field graphql.CollectedField, obj *Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Item",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AzeriteItem, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*AzeriteItem)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._AzeriteItem(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Item_azeriteEmpoweredItem(ctx context.Context, field graphql.CollectedField, obj *Item) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Item",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AzeriteEmpoweredItem, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*AzeriteEmpoweredItem)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._AzeriteEmpoweredItem(ctx, field.Selections, res)
}

var itemStatImplementors = []string{"ItemStat"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ItemStat(ctx context.Context, sel ast.SelectionSet, obj *ItemStat) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, itemStatImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ItemStat")
		case "stat":
			out.Values[i] = ec._ItemStat_stat(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._ItemStat_amount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ItemStat_stat(ctx context.Context, field graphql.CollectedField, obj *ItemStat) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ItemStat",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stat, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ItemStat_amount(ctx context.Context, field graphql.CollectedField, obj *ItemStat) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ItemStat",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

var itemTooltipParamsImplementors = []string{"ItemTooltipParams"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ItemTooltipParams(ctx context.Context, sel ast.SelectionSet, obj *ItemTooltipParams) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, itemTooltipParamsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ItemTooltipParams")
		case "transmogItem":
			out.Values[i] = ec._ItemTooltipParams_transmogItem(ctx, field, obj)
		case "timewalkerLevel":
			out.Values[i] = ec._ItemTooltipParams_timewalkerLevel(ctx, field, obj)
		case "azeritePower0":
			out.Values[i] = ec._ItemTooltipParams_azeritePower0(ctx, field, obj)
		case "azeritePower1":
			out.Values[i] = ec._ItemTooltipParams_azeritePower1(ctx, field, obj)
		case "azeritePower2":
			out.Values[i] = ec._ItemTooltipParams_azeritePower2(ctx, field, obj)
		case "azeritePower3":
			out.Values[i] = ec._ItemTooltipParams_azeritePower3(ctx, field, obj)
		case "azeritePower4":
			out.Values[i] = ec._ItemTooltipParams_azeritePower4(ctx, field, obj)
		case "azeritePowerLevel":
			out.Values[i] = ec._ItemTooltipParams_azeritePowerLevel(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _ItemTooltipParams_transmogItem(ctx context.Context, field graphql.CollectedField, obj *ItemTooltipParams) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ItemTooltipParams",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransmogItem, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ItemTooltipParams_timewalkerLevel(ctx context.Context, field graphql.CollectedField, obj *ItemTooltipParams) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ItemTooltipParams",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimewalkerLevel, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ItemTooltipParams_azeritePower0(ctx context.Context, field graphql.CollectedField, obj *ItemTooltipParams) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ItemTooltipParams",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AzeritePower0, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ItemTooltipParams_azeritePower1(ctx context.Context, field graphql.CollectedField, obj *ItemTooltipParams) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ItemTooltipParams",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AzeritePower1, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ItemTooltipParams_azeritePower2(ctx context.Context, field graphql.CollectedField, obj *ItemTooltipParams) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ItemTooltipParams",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AzeritePower2, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ItemTooltipParams_azeritePower3(ctx context.Context, field graphql.CollectedField, obj *ItemTooltipParams) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ItemTooltipParams",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AzeritePower3, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ItemTooltipParams_azeritePower4(ctx context.Context, field graphql.CollectedField, obj *ItemTooltipParams) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ItemTooltipParams",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AzeritePower4, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _ItemTooltipParams_azeritePowerLevel(ctx context.Context, field graphql.CollectedField, obj *ItemTooltipParams) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "ItemTooltipParams",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AzeritePowerLevel, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

var mountImplementors = []string{"Mount"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Mount(ctx context.Context, sel ast.SelectionSet, obj *Mount) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, mountImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mount")
		case "name":
			out.Values[i] = ec._Mount_name(ctx, field, obj)
		case "spellId":
			out.Values[i] = ec._Mount_spellId(ctx, field, obj)
		case "creatureId":
			out.Values[i] = ec._Mount_creatureId(ctx, field, obj)
		case "itemId":
			out.Values[i] = ec._Mount_itemId(ctx, field, obj)
		case "wowheadURL":
			out.Values[i] = ec._Mount_wowheadURL(ctx, field, obj)
		case "qualityId":
			out.Values[i] = ec._Mount_qualityId(ctx, field, obj)
		case "icons":
			out.Values[i] = ec._Mount_icons(ctx, field, obj)
		case "isGround":
			out.Values[i] = ec._Mount_isGround(ctx, field, obj)
		case "isFlying":
			out.Values[i] = ec._Mount_isFlying(ctx, field, obj)
		case "isAquatic":
			out.Values[i] = ec._Mount_isAquatic(ctx, field, obj)
		case "isJumping":
			out.Values[i] = ec._Mount_isJumping(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Mount_name(ctx context.Context, field graphql.CollectedField, obj *Mount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Mount",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Mount_spellId(ctx context.Context, field graphql.CollectedField, obj *Mount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Mount",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpellID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Mount_creatureId(ctx context.Context, field graphql.CollectedField, obj *Mount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Mount",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatureID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Mount_itemId(ctx context.Context, field graphql.CollectedField, obj *Mount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Mount",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Mount_wowheadURL(ctx context.Context, field graphql.CollectedField, obj *Mount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Mount",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WowheadURL(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Mount_qualityId(ctx context.Context, field graphql.CollectedField, obj *Mount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Mount",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualityID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Mount_icons(ctx context.Context, field graphql.CollectedField, obj *Mount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Mount",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icons(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Icons)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Icons(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Mount_isGround(ctx context.Context, field graphql.CollectedField, obj *Mount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Mount",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsGround, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Mount_isFlying(ctx context.Context, field graphql.CollectedField, obj *Mount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Mount",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFlying, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Mount_isAquatic(ctx context.Context, field graphql.CollectedField, obj *Mount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Mount",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAquatic, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Mount_isJumping(ctx context.Context, field graphql.CollectedField, obj *Mount) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Mount",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsJumping, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

var petImplementors = []string{"Pet"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Pet(ctx context.Context, sel ast.SelectionSet, obj *Pet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, petImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Pet")
		case "name":
			out.Values[i] = ec._Pet_name(ctx, field, obj)
		case "spellId":
			out.Values[i] = ec._Pet_spellId(ctx, field, obj)
		case "creatureId":
			out.Values[i] = ec._Pet_creatureId(ctx, field, obj)
		case "itemId":
			out.Values[i] = ec._Pet_itemId(ctx, field, obj)
		case "qualityId":
			out.Values[i] = ec._Pet_qualityId(ctx, field, obj)
		case "icon":
			out.Values[i] = ec._Pet_icon(ctx, field, obj)
		case "stats":
			out.Values[i] = ec._Pet_stats(ctx, field, obj)
		case "battlePetGuid":
			out.Values[i] = ec._Pet_battlePetGuid(ctx, field, obj)
		case "isFavorite":
			out.Values[i] = ec._Pet_isFavorite(ctx, field, obj)
		case "isFirstAbilitySlotSelected":
			out.Values[i] = ec._Pet_isFirstAbilitySlotSelected(ctx, field, obj)
		case "isSecondAbilitySlotSelected":
			out.Values[i] = ec._Pet_isSecondAbilitySlotSelected(ctx, field, obj)
		case "isThirdAbilitySlotSelected":
			out.Values[i] = ec._Pet_isThirdAbilitySlotSelected(ctx, field, obj)
		case "creatureName":
			out.Values[i] = ec._Pet_creatureName(ctx, field, obj)
		case "canBattle":
			out.Values[i] = ec._Pet_canBattle(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Pet_name(ctx context.Context, field graphql.CollectedField, obj *Pet) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Pet",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Pet_spellId(ctx context.Context, field graphql.CollectedField, obj *Pet) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Pet",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpellID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Pet_creatureId(ctx context.Context, field graphql.CollectedField, obj *Pet) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Pet",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatureID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Pet_itemId(ctx context.Context, field graphql.CollectedField, obj *Pet) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Pet",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Pet_qualityId(ctx context.Context, field graphql.CollectedField, obj *Pet) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Pet",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QualityID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Pet_icon(ctx context.Context, field graphql.CollectedField, obj *Pet) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Pet",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Pet_stats(ctx context.Context, field graphql.CollectedField, obj *Pet) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Pet",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stats, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*PetStats)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._PetStats(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Pet_battlePetGuid(ctx context.Context, field graphql.CollectedField, obj *Pet) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Pet",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BattlePetGUID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Pet_isFavorite(ctx context.Context, field graphql.CollectedField, obj *Pet) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Pet",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFavorite, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Pet_isFirstAbilitySlotSelected(ctx context.Context, field graphql.CollectedField, obj *Pet) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Pet",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsFirstAbilitySlotSelected, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Pet_isSecondAbilitySlotSelected(ctx context.Context, field graphql.CollectedField, obj *Pet) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Pet",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSecondAbilitySlotSelected, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Pet_isThirdAbilitySlotSelected(ctx context.Context, field graphql.CollectedField, obj *Pet) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Pet",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsThirdAbilitySlotSelected, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Pet_creatureName(ctx context.Context, field graphql.CollectedField, obj *Pet) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Pet",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatureName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Pet_canBattle(ctx context.Context, field graphql.CollectedField, obj *Pet) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Pet",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CanBattle, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*res)
}

var petStatsImplementors = []string{"PetStats"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _PetStats(ctx context.Context, sel ast.SelectionSet, obj *PetStats) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, petStatsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PetStats")
		case "speciesId":
			out.Values[i] = ec._PetStats_speciesId(ctx, field, obj)
		case "breedId":
			out.Values[i] = ec._PetStats_breedId(ctx, field, obj)
		case "petQualityId":
			out.Values[i] = ec._PetStats_petQualityId(ctx, field, obj)
		case "level":
			out.Values[i] = ec._PetStats_level(ctx, field, obj)
		case "health":
			out.Values[i] = ec._PetStats_health(ctx, field, obj)
		case "power":
			out.Values[i] = ec._PetStats_power(ctx, field, obj)
		case "speed":
			out.Values[i] = ec._PetStats_speed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _PetStats_speciesId(ctx context.Context, field graphql.CollectedField, obj *PetStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "PetStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpeciesID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _PetStats_breedId(ctx context.Context, field graphql.CollectedField, obj *PetStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "PetStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BreedID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _PetStats_petQualityId(ctx context.Context, field graphql.CollectedField, obj *PetStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "PetStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PetQualityID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _PetStats_level(ctx context.Context, field graphql.CollectedField, obj *PetStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "PetStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Level, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _PetStats_health(ctx context.Context, field graphql.CollectedField, obj *PetStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "PetStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Health, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _PetStats_power(ctx context.Context, field graphql.CollectedField, obj *PetStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "PetStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Power, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _PetStats_speed(ctx context.Context, field graphql.CollectedField, obj *PetStats) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "PetStats",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Speed, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

var professionImplementors = []string{"Profession"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Profession(ctx context.Context, sel ast.SelectionSet, obj *Profession) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, professionImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Profession")
		case "id":
			out.Values[i] = ec._Profession_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Profession_name(ctx, field, obj)
		case "icon":
			out.Values[i] = ec._Profession_icon(ctx, field, obj)
		case "rank":
			out.Values[i] = ec._Profession_rank(ctx, field, obj)
		case "max":
			out.Values[i] = ec._Profession_max(ctx, field, obj)
		case "recipes":
			out.Values[i] = ec._Profession_recipes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Profession_id(ctx context.Context, field graphql.CollectedField, obj *Profession) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Profession",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Profession_name(ctx context.Context, field graphql.CollectedField, obj *Profession) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Profession",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Profession_icon(ctx context.Context, field graphql.CollectedField, obj *Profession) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Profession",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Profession_rank(ctx context.Context, field graphql.CollectedField, obj *Profession) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Profession",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rank, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Profession_max(ctx context.Context, field graphql.CollectedField, obj *Profession) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Profession",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Profession_recipes(ctx context.Context, field graphql.CollectedField, obj *Profession) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Profession",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipes, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {

			if res[idx1] == nil {
				return graphql.Null
			}
			return graphql.MarshalInt(*res[idx1])
		}()
	}

	return arr1
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	var wg sync.WaitGroup
	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "character":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_character(ctx, field)
				wg.Done()
			}(i, field)
		case "mounts":
			wg.Add(1)
			go func(i int, field graphql.CollectedField) {
				out.Values[i] = ec._Query_mounts(ctx, field)
				if out.Values[i] == graphql.Null {
					invalid = true
				}
				wg.Done()
			}(i, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	wg.Wait()
	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Query_character(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_character_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Character(rctx, args["input"].(CharacterQueryInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Character)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec._Character(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query_mounts(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query_mounts_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Mounts(rctx, args["input"].(SearchInput))
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Mount)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				if res[idx1] == nil {
					return graphql.Null
				}

				return ec._Mount(ctx, field.Selections, res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field_Query___type_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Query",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, nil, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec.___Schema(ctx, field.Selections, res)
}

var reputationImplementors = []string{"Reputation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Reputation(ctx context.Context, sel ast.SelectionSet, obj *Reputation) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, reputationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Reputation")
		case "id":
			out.Values[i] = ec._Reputation_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Reputation_name(ctx, field, obj)
		case "standing":
			out.Values[i] = ec._Reputation_standing(ctx, field, obj)
		case "value":
			out.Values[i] = ec._Reputation_value(ctx, field, obj)
		case "max":
			out.Values[i] = ec._Reputation_max(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _Reputation_id(ctx context.Context, field graphql.CollectedField, obj *Reputation) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Reputation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Reputation_name(ctx context.Context, field graphql.CollectedField, obj *Reputation) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Reputation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Reputation_standing(ctx context.Context, field graphql.CollectedField, obj *Reputation) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Reputation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Standing, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Reputation_value(ctx context.Context, field graphql.CollectedField, obj *Reputation) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Reputation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _Reputation_max(ctx context.Context, field graphql.CollectedField, obj *Reputation) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "Reputation",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Max, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

var transmogItemImplementors = []string{"TransmogItem"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _TransmogItem(ctx context.Context, sel ast.SelectionSet, obj *TransmogItem) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, transmogItemImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TransmogItem")
		case "itemId":
			out.Values[i] = ec._TransmogItem_itemId(ctx, field, obj)
		case "itemAppearanceModId":
			out.Values[i] = ec._TransmogItem_itemAppearanceModId(ctx, field, obj)
		case "transmogItemAppearanceModId":
			out.Values[i] = ec._TransmogItem_transmogItemAppearanceModId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) _TransmogItem_itemId(ctx context.Context, field graphql.CollectedField, obj *TransmogItem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "TransmogItem",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _TransmogItem_itemAppearanceModId(ctx context.Context, field graphql.CollectedField, obj *TransmogItem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "TransmogItem",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ItemAppearanceModID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

// nolint: vetshadow
func (ec *executionContext) _TransmogItem_transmogItemAppearanceModId(ctx context.Context, field graphql.CollectedField, obj *TransmogItem) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "TransmogItem",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TransmogItemAppearanceModID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __DirectiveImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))

	for idx1 := range res {
		arr1[idx1] = func() graphql.Marshaler {
			return graphql.MarshalString(res[idx1])
		}()
	}

	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Directive",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __EnumValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__EnumValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __FieldImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalBoolean(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Field",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __InputValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__InputValue",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __SchemaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

// nolint: vetshadow
func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Schema",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Directive(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __TypeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	invalid := false
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalid = true
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	if invalid {
		return graphql.Null
	}
	return out
}

// nolint: vetshadow
func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if resTmp == nil {
		if !ec.HasError(rctx) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)
	return graphql.MarshalString(res)
}

// nolint: vetshadow
func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field___Type_fields_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Field(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___Type(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := field___Type_enumValues_args(rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   args,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___EnumValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	arr1 := make(graphql.Array, len(res))
	var wg sync.WaitGroup

	isLen1 := len(res) == 1
	if !isLen1 {
		wg.Add(len(res))
	}

	for idx1 := range res {
		idx1 := idx1
		rctx := &graphql.ResolverContext{
			Index:  &idx1,
			Result: &res[idx1],
		}
		ctx := graphql.WithResolverContext(ctx, rctx)
		f := func(idx1 int) {
			if !isLen1 {
				defer wg.Done()
			}
			arr1[idx1] = func() graphql.Marshaler {

				return ec.___InputValue(ctx, field.Selections, &res[idx1])
			}()
		}
		if isLen1 {
			f(idx1)
		} else {
			go f(idx1)
		}

	}
	wg.Wait()
	return arr1
}

// nolint: vetshadow
func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	ctx = ec.Tracer.StartFieldExecution(ctx, field)
	defer func() { ec.Tracer.EndFieldExecution(ctx) }()
	rctx := &graphql.ResolverContext{
		Object: "__Type",
		Args:   nil,
		Field:  field,
	}
	ctx = graphql.WithResolverContext(ctx, rctx)
	ctx = ec.Tracer.StartFieldResolverExecution(ctx, rctx)
	resTmp := ec.FieldMiddleware(ctx, obj, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	rctx.Result = res
	ctx = ec.Tracer.StartFieldChildExecution(ctx)

	if res == nil {
		return graphql.Null
	}

	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) _CharacterFeedItem(ctx context.Context, sel ast.SelectionSet, obj *CharacterFeedItem) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case CharacterFeedLoot:
		return ec._CharacterFeedLoot(ctx, sel, &obj)
	case *CharacterFeedLoot:
		return ec._CharacterFeedLoot(ctx, sel, obj)
	case CharacterFeedBossKill:
		return ec._CharacterFeedBossKill(ctx, sel, &obj)
	case *CharacterFeedBossKill:
		return ec._CharacterFeedBossKill(ctx, sel, obj)
	case CharacterFeedCriteria:
		return ec._CharacterFeedCriteria(ctx, sel, &obj)
	case *CharacterFeedCriteria:
		return ec._CharacterFeedCriteria(ctx, sel, obj)
	case CharacterFeedAchievement:
		return ec._CharacterFeedAchievement(ctx, sel, &obj)
	case *CharacterFeedAchievement:
		return ec._CharacterFeedAchievement(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func UnmarshalCharacterQueryInput(v interface{}) (CharacterQueryInput, error) {
	var it CharacterQueryInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error
			it.Name, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "realm":
			var err error
			it.Realm, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error
			it.Region, err = graphql.UnmarshalString(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalSearchInput(v interface{}) (SearchInput, error) {
	var it SearchInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "type":
			var err error
			var ptr1 SearchType
			if v != nil {
				err = (&ptr1).UnmarshalGQL(v)
				it.Type = &ptr1
			}

			if err != nil {
				return it, err
			}
		case "term":
			var err error
			var ptr1 string
			if v != nil {
				ptr1, err = graphql.UnmarshalString(v)
				it.Term = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, obj interface{}, next graphql.Resolver) (ret interface{}) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "schema/schema.graphql", Input: `enum CharacterFeedItemType {
  LOOT
  BOSSKILL
  CRITERIA
  ACHIEVEMENT
}

type CharacterFeedCriteria {
  type: CharacterFeedItemType
  timestamp: Int
  achievement: Achievement
}

type AchievementCriteria {
  id: Int
  description: String
  orderIndex: Int
  max: Int
}

type Achievement {
  id: Int
  title: String
  points: Int
  description: String
  # rewardItems: [], ??
  icon: String
  criteria: [AchievementCriteria]
  accountWide: Boolean
  factionId: Int
}

type CharacterFeedBossKill {
  type: CharacterFeedItemType
  timestamp: Int
  achievement: Achievement
  featOfStrength: Boolean
  criteria: AchievementCriteria
  quantity: Int
  name: String
}

type CharacterFeedLoot {
  type: CharacterFeedItemType
  timestamp: Int
  itemId: Int
  context: String
  bonusLists: [Int]
}

type CharacterFeedAchievement {
  type: CharacterFeedItemType
  timestamp: Int
  achievement: Achievement
  featOfStrength: Boolean
}

union CharacterFeedItem =
    CharacterFeedLoot
  | CharacterFeedBossKill
  | CharacterFeedCriteria
  | CharacterFeedAchievement


type PetStats {
  speciesId: Int
  breedId: Int
  petQualityId: Int
  level: Int
  health: Int
  power: Int
  speed: Int
}

type Pet {
  name: String
  spellId: Int
  creatureId: Int
  itemId: Int
  qualityId: Int
  icon: String
  stats: PetStats
  battlePetGuid: String
  isFavorite: Boolean
  isFirstAbilitySlotSelected: Boolean
  isSecondAbilitySlotSelected: Boolean
  isThirdAbilitySlotSelected: Boolean
  creatureName: String
  canBattle: Boolean
}

type CharacterPets {
  numCollected: Int
  numNotCollected: Int
  collected: [Pet]
}

type Icons {
  small: String
  medium: String
  large: String
}

type Mount {
  name: String
  spellId: Int
  creatureId: Int
  itemId: Int
  wowheadURL: String
  qualityId: Int
  icons: Icons
  isGround: Boolean
  isFlying: Boolean
  isAquatic: Boolean
  isJumping: Boolean
}

type CharacterMounts {
  numCollected: Int
  numNotCollected: Int
  collected: [Mount]
}

type ItemTooltipParams {
  transmogItem: Int
  timewalkerLevel: Int
  azeritePower0: Int
  azeritePower1: Int
  azeritePower2: Int
  azeritePower3: Int
  azeritePower4: Int
  azeritePowerLevel: Int
}

type ItemStat {
  stat: Int
  amount: Int
}

type TransmogItem {
  itemId: Int
  itemAppearanceModId: Int
  transmogItemAppearanceModId: Int
}

type AzeriteItem {
  azeriteLevel: Int
  azeriteExperience: Int
  azeriteExperienceRemaining: Int
}

type AzeritePower {
  id: Int
  tier: Int
  spellId: Int
  bonusListId: Int
}

type AzeriteEmpoweredItem {
  azeritePowers: [AzeritePower]
}

type Item {
  id: Int
  name: String
  icon: String
  quality: Int
  itemLevel: Int
  tooltipParams: ItemTooltipParams
  stats: [ItemStat]
  armor: Int
  context: String
  bonusLists: [Int]
  artifactId: Int
  displayInfoId: Int
  artifactAppearanceId: Int
  appearance: TransmogItem
  azeriteItem: AzeriteItem
  azeriteEmpoweredItem: AzeriteEmpoweredItem
}

type CharacterItems {
  head: Item
  neck: Item
  shoulder: Item
  back: Item
  chest: Item
  shirt: Item
  tabard: Item
  wrist: Item
  hands: Item
  waist: Item
  legs: Item
  feet: Item
  finger1: Item
  finger2: Item
  trinket1: Item
  trinket2: Item
  mainHand: Item
  offHand: Item
}

type Profession {
  id: Int
  name: String
  icon: String
  rank: Int
  max: Int
  recipes: [Int]
}

type CharacterProfessions {
  primary: [Profession]
  secondary: [Profession]
}

type Reputation {
  id: Int
  name: String
  standing: Int
  value: Int
  max: Int
}

type CharacterStats {
  health: Int
  powerType: String
  power: Int
  str: Int
  agi: Int
  int: Int
  sta: Int
  speedRating: Float
  speedRatingBonus: Float
  crit: Float
  critRating: Float
  haste: Float
  hasteRating: Float
  hasteRatingPercent: Float
  mastery: Float
  masteryRating: Float
  leech: Float
  leechRating: Float
  leechRatingBonus: Float
  versatility: Float
  versatilityDamageDoneBonus: Float
  versatilityHealingDoneBonus: Float
  versatilityDamageTakenBonus: Float
  avoidanceRating: Float
  avoidanceRatingBonus: Float
  spellPen: Float
  spellCrit: Float
  spellCritRating: Float
  mana5: Float
  mana5Combat: Float
  armor: Float
  dodge: Float
  dodgeRating: Float
  parry: Float
  parryRating: Float
  block: Float
  blockRating: Float
  mainHandDmgMin: Float
  mainHandDmgMax: Float
  mainHandSpeed: Float
  mainHandDps: Float
  offHandDmgMin: Float
  offHandDmgMax: Float
  offHandSpeed: Float
  offHandDps: Float
  rangedDmgMin: Float
  rangedDmgMax: Float
  rangedSpeed: Float
  rangedDps: Float
}

type Character {
  lastModified: Int
  name: String
  realm: String
  battlegroup: String
  class: String
  race: String
  gender: String
  level: Int
  achievementPoints: Int
  thumbnail: String
  calcClass: String
  faction: String
  totalHonorableKills: Int
  feed: [CharacterFeedItem]
  pets: CharacterPets
  mounts: CharacterMounts
  averageItemLevel: Int
  averageItemLevelInBags: Int
  items: CharacterItems
  professions: CharacterProfessions
  reputation: [Reputation]
  stats: CharacterStats
}

input CharacterQueryInput {
  name: String!
  realm: String!
  region: String!
}

enum SearchType {
  FUZZY
  REGEXP
  WILDCARD
  NORMAL
}

input SearchInput {
  type: SearchType
  term: String
}

type Query {
  character(input: CharacterQueryInput!): Character
  mounts(input: SearchInput!): [Mount]!
}
`},
)
